#!/usr/bin/env bash
# shellcheck disable=2034
# shellcheck disable=2317
# shellcheck disable=1090
#---------------------------------------------------------------------
#
#  pmgadmin
#
#  [Description]
#  Linux admin help script
#
#  [Author]
#    Peter Malmberg <peter.malmberg@gmail.com>
#
#  [Date]
#    2023-02-08
#
#  [License]
#    MIT
#
#---------------------------------------------------------------------
# Generated with bashplates. [https://github.com/zonbrisad/bashplates]
#---------------------------------------------------------------------
#

# Display commands as they are executed
#set -o xtrace
# Display shell input lines as they are read
#set -v

# Exit script when a command fails. Append ||true if error is expected
#set -o errexit # || true
# Exit script when undeclared variable is used
#set -o nounset
# Exit script when pipe fails
set -o pipefail

#---------------------------------------------------------------------
# User defined Settings
#---------------------------------------------------------------------
bpUserSettings() {

  #  UID    UNAME NAME             EMAIL                     SHELL  OPTIONS    GROUPS
  userList=(
    "2000" "pmg" "Peter Malmberg" "peter.malmberg@gmail.com" "/bin/bash" "--create-home" "dialout adm sudo i2c spi"
    "3000" "files" "Files" "" "/usr/sbin/nologin" "--no-create-home" ""
  )

  # GROUPID  GROUPNAME
  groupList=(
  )

  #  USER   GROUP
  userGroup=(
    "lpmg" "dialout i2c spi"
  )

  RPSERVER=rpserver
  RPSERVER_SHARE=${RPSERVER}:\files
  RPSERVER_MNT=/mnt/rpfiles

}
#---------------------------------------------------------------------
# User defined functions
#---------------------------------------------------------------------

##- Network

hostname() { ##D Set hostname
  nhn=$(bpReadStr "New hostname" "$HOSTNAME")
  sudo hostnamectl set-hostname $nhn
}

#
# $1 file
# $2 pattern matching line
# $3 new text
#
sudoReplaceLine() { ##I Replace entire line matching pattern
  sed -i -e "0,/${2}/s/${2}.*/${3}/" "${1}"
}

sshxforward() { ##D Enable X forwarding via SSH

  sudoReplaceLine
}

##- System

sysinfo() { ##D
  # du -sh ~/.cache
  bpPrintLine "Cache"
  bpPrintDesc "Thumbnails" "$(du -sh ~/.cache/thumbnails/)"
  bpPrintDesc "Apt cache" "$(du -sh /var/cache/apt 2>/dev/null)"
  bpPrintDesc "Journals" "$(journalctl --disk-usage)"
}

sysclean() { ##D System cleanup
  # remove apt cache
  sudo apt clean
  bpOk "APT cache removed"
  sudo apt autoremove --yes
  bpOk "Unused packages removed"
  sudo journalctl --vacuum-time=7d
  bpOk "Journals pruned"
}

##- Filesystems

mountServer() { ##D Add mount rule to fileserver in fstab
  bpAssertRoot
  cDir /storage
  bpAppendIfNoSuchLine /etc/fstab "fileserver:/storage  /storage nfs    auto   0 0"
}

nfs_mount() { ##I Mount nfs share
  SHARE="$1"
  MPOINT="$2"
  #sudo bpMkDir "$MPOINT"
}

#bpSudo=false
BP_SUDO=false

bpDo() {
  if [ "$BP_SUDO" = "true" ]; then
    # if [ "$BP_SUDO" == "0" ]; then
    bpInfo "bpDo sudo $*   [$BP_SUDO]"
    eval "sudo $*"
    return $?
  fi
  bpInfo "bpDo $*   [$BP_SUDO]"
  eval "$*"
  return $?
}

#
# $1 Directory to be created
#
bpMkDir_alt() { ##I Create a directory if it does not exist
  if [ ! -d "$1" ]; then
    # if mkdir -p "$1"; then
    if bpDo mkdir -p "$1"; then
      bpOk "Creating directory $(bpColorizeFile "${1}")."
      return 0
    else
      bpError "Failed to create directory $(bpColorizeFile "${1}")."
      return 1
    fi
  fi
}

mrps() { ##D Mount rpserver nfs share

  BP_SUDO=true
  bpMkDir "${RPSERVER_MNT}"
  BP_SUDO=false
  if sudo mount -t nfs "${RPSERVER_SHARE}" "${RPSERVER_MNT}"; then
    bpOk "Rpserver mounted on ${RPSERVER_MNT}"
  else
    bpError "Failed to mount rpserver nfs share"
  fi
}

mts() { ##D Mount test share on rpserver
  # BP_SUDO=false
  # bpDo 'ls /'
  # #bpInfo $?
  # BP_SUDO=true
  # bpDo 'ls /'
  # #bpInfo $?
  # bpDo 'ls  /donotexist'
  # #bpInfo $?

  BP_SUDO=false
  # BP_SUDO=1
  bpMkDir_alt A
  BP_SUDO=true
  bpMkDir_alt /temp/XXX
  # BP_SUDO=0

  # mount_nfs "rpserver:/testshare" "/mnt/testshare"
}

#
# $1 nfs share
# $2 mountpoint
#
mount_nfs() { ##D Mount nfs share

  nfsshare="$1"
  mountpoint="$2"

  BP_SUDO=true
  bpMkDir_alt "${mountpoint}"
  BP_SUDO=false
  if sudo mount -t nfs "${nfsshare}" "${mountpoint}"; then
    bpOk "Rpserver mounted on ${nfsshare}"
  else
    bpError "Failed to mount ${nfsshare} nfs share"
  fi
}

addrps() { ##D Add mount rule to rpserver in fstab
  BP_SUDO=true
  bpMkDir "${RPSERVER_MNT}"
  bpAppendIfNoSuchLine /etc/fstab "${RPSERVER_SHARE}  ${RPSERVER_MNT} nfs    auto   0 0"
  BP_SUDO=false
}

##- Users & groups

addSambaUser() {
  smbpasswd -a pmg
}

#
# Check if user exists
#
# $1 uid
#
bpIsUser() {
  getent passwd "$1" >/dev/null
  return $?
}

#
# Check if group exists
#
# $1 uid
#
bpIsGroup() {
  getent group "$1" >/dev/null
  return $?
}

#
# Check if user is member of group
#
# $username
# $groupname
#
bpIsInGroup() {
  if id --name --groups --zero "$1" | grep --quiet --null-data --line-regexp --fixed-string "$2"; then
    return 0
  else
    return 1
  fi
}

#
# $1 User
# $2 Groups
#
addUserToGroup() {
  local USER="$1"
  local GROUPSS="$2"

  if ! bpIsUser "$USER"; then
    bpError "User $USER does not exist!"
    return
  fi

  IFS=' '
  for GROUP in $GROUPSS; do

    if ! bpIsGroup "$GROUP"; then
      bpWarning "Group $GROUP does not exist!"
      continue
    fi

    if bpIsInGroup $USER $GROUP; then
      bpInfo "User $USER is already member of group $GROUP"
      continue
    fi

    if sudo usermod -a -G "$GROUP" "$USER"; then
      bpOk "Adding user $USER to group $GROUP"
    else
      bpError "Failed adding user $USER to group $GROUP"
    fi
  done
}

#
# Add a new user if not existing
#
# $1 = username
# $2 = uid
# $3 = name
# $4 = email
# $5 = shell
# $6 = options
# $7 = groups
#
addUser() {
  if bpIsUser "$2"; then
    bpInfo "User $2 already exists"
    return
  fi
  if sudo useradd "$1" --uid "$2" --shell "$5" --comment "${3},,," "$6"; then
    bpOk "Adding user:  $1 $2 $3 $4"
  else
    bpError "Failed to add user $1"
  fi
  IFS=' '
  read -ra XGROUPS <<<"$7"
  for GROUP in "${XGROUPS[@]}"; do
    addUserToGroup "$1" "$GROUP"
  done
}

#
# Add group
#
# $1 = group
# $2 = id
#
addGroup() {
  if bpIsGroup "$1"; then
    bpInfo "Group $1 already exists"
    return 1
  fi
  if sudo groupadd "$1" --gid "$2"; then
    bpOk "Adding group: $1"
  else
    bpError "Failed adding group $1"
  fi
}

#
# Remove user
#
# $1 = username
# $2 = userid
#
rmUser() {
  if ! bpIsUser "$2"; then
    bpInfo "User $1 does not exist"
    return
  fi

  if sudo deluser "$1" --remove-home &>/dev/null; then
    bpOk "Removed user:  $1"
  else
    bpError "Failed to remove user $1"
  fi
}

#
# Remove group
#
# $1 = group
#
rmGroup() {
  if ! bpIsGroup "$1"; then
    bpError "Group $1 does not exist"
    return
  fi

  if sudo delgroup "$1" &>/dev/null; then
    bpOk "Removing group:  $1"
  else
    bpError "Failed at removing group $1"
  fi
}

lsu() { ##D List existing users
  cat /etc/passwd | column --table --separator :
}

lsug() { ##D List users and groups

  IFS=$'\n'
  bpPrintLine "Users"
  i=0
  len=${#userList[@]}
  while [ "$i" -lt "$len" ]; do
    U_ID=${userList[i]}
    ((i++))
    U_NAME=${userList[i]}
    ((i++))
    U_PERSONAL=${userList[i]}
    ((i++))
    U_EMAIL=${userList[i]}
    ((i++))
    U_SHELL=${userList[i]}
    ((i++))
    U_OPTS=${userList[i]}
    ((i++))
    U_GROUPS=${userList[i]}
    ((i++))
    printf "%-10s %-4s %-15s %-30s %-20s %-20s  %s\n" "$U_NAME" "$U_ID" "$U_PERSONAL" "$U_EMAIL" "$U_SHELL" "$U_OPTS" "$U_GROUPS"
  done
  bpPrintLine "Groups"
  i=0
  len=${#groupList[@]}
  while [ "$i" -lt "$len" ]; do
    G_ID=${groupList[i]}
    ((i++))
    G_NAME=${groupList[i]}
    ((i++))
    printf "%-10s %s\n" "$G_NAME" "$G_ID"
  done

  bpPrintLine
}

lsgm() { ##D List group members
  bpPrintLine "Group members"
  i=0
  len=${#userGroup[@]}
  while [ "$i" -lt "$len" ]; do
    USER=${userGroup[i]}
    ((i++))
    GROUP=${userGroup[i]}
    ((i++))
    printf "%-10s %-10s\n" "$USER" "$GROUP"
  done
  bpPrintLine
}

rug() { ##D Remove users and groups
  IFS=$'\n'
  i=0
  len=${#userList[@]}
  while [ "$i" -lt "$len" ]; do
    U_ID=${userList[i]}
    ((i++))
    U_NAME=${userList[i]}
    ((i++))
    U_PERSONAL=${userList[i]}
    ((i++))
    U_EMAIL=${userList[i]}
    ((i++))
    U_SHELL=${userList[i]}
    ((i++))
    U_OPTS=${userList[i]}
    ((i++))
    U_GROUPS=${userList[i]}
    ((i++))
    rmUser "$U_NAME" "$U_ID"
  done

  i=0
  len=${#groupList[@]}
  while [ "$i" -lt "$len" ]; do
    G_ID=${groupList[i]}
    ((i++))
    G_NAME=${groupList[i]}
    ((i++))
    rmGroup "${G_NAME}"
  done
}

omv() { ##D Open media vault import data
  IFS=$'\n'
  bpPrintLine Users
  echo
  i=0
  len=${#userList[@]}
  while [ "$i" -lt "$len" ]; do
    U_ID=${userList[i]}
    ((i++))
    U_NAME=${userList[i]}
    ((i++))
    U_PERSONAL=${userList[i]}
    ((i++))
    U_EMAIL=${userList[i]}
    ((i++))
    U_SHELL=${userList[i]}
    ((i++))
    U_OPTS=${userList[i]}
    ((i++))
    U_GROUPS=${userList[i]}
    ((i++))
    # <username>;<uid>;<comment>;<email>;<password>;<shell>;<groupname,groupname,...>;<disallowusermod>
    echo "${U_NAME};${U_ID};${U_PERSONAL};${U_EMAIL};;${U_SHELL};;false"
  done

  echo
  bpPrintLine Groups
  echo
  i=0
  len=${#groupList[@]}
  while [ "$i" -lt "$len" ]; do
    G_ID=${groupList[i]}
    ((i++))
    G_NAME=${groupList[i]}
    ((i++))
    echo "${G_NAME};${G_ID};"
  done
}

all() { ##D Add users and groups
  au
  ag
  aug
}

au() { ##D Add users
  IFS=$'\n'
  i=0
  len=${#userList[@]}
  while [ "$i" -lt "$len" ]; do
    U_ID=${userList[i]}
    ((i++))
    U_NAME=${userList[i]}
    ((i++))
    U_PERSONAL=${userList[i]}
    ((i++))
    U_EMAIL=${userList[i]}
    ((i++))
    U_SHELL=${userList[i]}
    ((i++))
    U_OPTS=${userList[i]}
    ((i++))
    U_GROUPS=${userList[i]}
    ((i++))
    addUser "$U_NAME" "$U_ID" "$U_PERSONAL" "$U_EMAIL" "$U_SHELL" "$U_OPTS" "$U_GROUPS"
    addUserToGroup "$U_NAME" "$U_GROUPS"
  done
}

ag() { ##D Add groups
  IFS=$'\n'
  i=0
  len=${#groupList[@]}
  while [ "$i" -lt "$len" ]; do
    G_ID=${groupList[i]}
    ((i++))
    G_NAME=${groupList[i]}
    ((i++))
    addGroup "$G_NAME" "$G_ID"
  done
}

aug() { ##D Add users to groups
  i=0
  len=${#userGroup[@]}
  while [ "$i" -lt "$len" ]; do
    USER=${userGroup[i]}
    ((i++))
    GROUP=${userGroup[i]}
    ((i++))
    addUserToGroup "$USER" "$GROUP"
  done
}

##- Backup

BACKUP_DIR="${HOME}/backup/${HOSTNAME}"
BACKUPS=10

ball() { ##D Backup all
  bpMkDir "${BACKUP_DIR}"
  # remove oldest backup
  rm -rf "${BACKUP_DIR}/backup_${BACKUPS}"
  # rotate backups
  for ((x = BACKUPS; x > 0; x--)); do
    bdir="${BACKUP_DIR}/backup_$((x - 1))"
    # check if directory exist before renameing  it
    if [ -d "${bdir}" ]; then
      mv -f "${bdir}" "${BACKUP_DIR}/backup_${x}"
    fi
  done
  rsync --archive \
    --delete \
    --relative \
    --progress \
    --exclude="${BACKUP_DIR}" \
    --exclude="${ARCHIVE_DIR}" \
    --exclude="${OUTDIR}" \
    --exclude="${HOME}/Downloads" \
    --link-dest="${BACKUP_DIR}/backup_1" \
    "${HOME}"/pmg \
    "${HOME}"/.ssh \
    "${HOME}"/.config \
    "${HOME}"/Documents \
    "${BACKUP_DIR}/backup_0"

  if (($? == 0)); then
    echo
    bpOk "Created backup."
  fi

  type ball
}

bubuntu() { ##D Backup to Ubuntu
  # bpMkDir "${BACKUP_DIR}"
  # # remove oldest backup
  # rm -rf "${BACKUP_DIR}/backup_${BACKUPS}"
  # # rotate backups
  # for ((x = BACKUPS; x > 0; x--)); do
  #   bdir="${BACKUP_DIR}/backup_$((x - 1))"
  #   # check if directory exist before renameing  it
  #   if [ -d "${bdir}" ]; then
  #     mv -f "${bdir}" "${BACKUP_DIR}/backup_${x}"
  #   fi
  # done
  rsync --archive \
    --delete \
    --relative \
    --progress \
    --exclude="${BACKUP_DIR}" \
    --exclude="${ARCHIVE_DIR}" \
    --exclude="${OUTDIR}" \
    --exclude="${HOME}/Downloads" \
    --link-dest="${BACKUP_DIR}/backup_1" \
    "${HOME}"/pmg \
    lpmg@ubuntu:backup/.

  # if (($? == 0)); then
  #   echo
  #   bpOk "Created backup."
  # fi

}

##-

addpath() { ##D Add path to PATH
  bpAddPath" $2"
}

#---------------------------------------------------------------------
# Bashplate settings
#---------------------------------------------------------------------
bpInitSettings() {

  ##V Script version info
  BP_VERSION="1.02"

  ##V Usage info
  BP_USAGE="Usage: ${BP_SELF_NAME} command [option]"

  ##V Description text
  BP_DESC="Linux admin tools"

  ##V logfile (uncomment to use logfile)
  BP_LOGFILE=${BP_SELF_DIR}/${BP_SELF_NAME}.log

  ##V Lock file (uncomment to use lock file feature )
  BP_LOCK_FILE=/tmp/${BP_SELF_NAME}.lock

  ##V Logging options (uncomment to activate logging parameters)
  BP_LOG_OK=1
  BP_LOG_INFO=1
  BP_LOG_WARNING=1
  BP_LOG_ERROR=1
  BP_LOG_CRITICAL=1

  ##V Activate settings function (will create settings file when run)
  BP_CONF=1

}
#---------------------------------------------------------------------
# Bashplate Hooks
#---------------------------------------------------------------------

##V Default command (uncomment to use a default command )
DEFAULT_CMD_HOOK=help

##V Pre script hook, execute this function before every command
#PRE_SCRIPT_HOOK=

##V Post script hook, execute this function after every command
#POST_SCRIPT_HOOK=

##V Function to be executed before every other cmd except DEFAULT function
#PRE_CMD_HOOK=

##V Function to be executed after every other function except DEFAULT function
#POST_CMD_HOOK=

##V Function to be executed after information command
#POST_INFO_HOOK=

##V Function run before help command is executed
#PRE_HELP_HOOK=

##V Function run after help command is executed
#POST_HELP_HOOK=

#---------------------------------------------------------------------
# Signal traps
#---------------------------------------------------------------------

signalInt() {
  bpCleanUp
  exit "$BP_OK"
}

signalHup() {
  bpCleanUp
  exit "$BP_OK"
}

signalQuit() {
  echo "Quit"
  bpCleanUp
}

signalTerm() {
  echo "Term"
  bpCleanUp
}

signalErr() {
  echo
  echo
  bpError "Trace error Row: $2  Function: $1"
  echo
  bpCallStack "$*"
  bpExit 1
}

signalDbg() {
  echo "Debug Row: $2  Function: $1"
}

##C- IHELP Exit and cleanup

bpCallStack() { ##I Print out BASH call stack
  bpPrintLine "Call stack"
  echo
  local frame=0
  while caller "$frame" | sed -r -e "s/[0-9]*/${BP_C_VALUE}&${E_RESET}/"; do
    ((frame++))
  done
  echo "$*"
  bpPrintLine
}

bpCleanUp() {             ##I Cleanup function
  rm -f "${BP_LOCK_FILE}" # remove Lock file
  #  echo -e "${E_SHOW}"     # Turn on cursor if turned of
}

#
# $1 exit code, if not given exit code is 0=SUCCESS
#
bpExit() { ##I Function for safely exiting script
  bpCleanUp

  # execute postscript hook if existing
  if [ -n "$POST_SCRIPT_HOOK" ]; then
    ${POST_SCRIPT_HOOK}
  fi

  # Check if argument is given
  if [ -z "$1" ]; then
    exit "$BP_OK"
  else
    exit "$1"
  fi
}

bpErrorExit() { ##I Safely exit script with a error
  bpError "${1}"
  bpCleanUp
  exit 1
}

#---------------------------------------------------------------------
# ANSI escape codes
#---------------------------------------------------------------------

# Check if terminal is 16 color only
if [[ "linux rxvt-16color" = *${TERM}* ]]; then

  # ANSI foreground colors codes
  #
  E_BLACK=$'\e[30m'        # Black
  E_RED=$'\e[31m'          # Red
  E_GREEN=$'\e[32m'        # Green
  E_YELLOW=$'\e[33m'       # Yellow
  E_BLUE=$'\e[34m'         # Blue
  E_MAGENTA=$'\e[35m'      # Magenta
  E_CYAN=$'\e[36m'         # Cyan
  E_GRAY=$'\e[37m'         # Gray
  E_DARKGRAY=$'\e[1;30m'   # Dark Gray
  E_BR_RED=$'\e[1;31m'     # Bright Red
  E_BR_GREEN=$'\e[1;32m'   # Bright Green
  E_BR_YELLOW=$'\e[1;33m'  # Bright Yellow
  E_BR_BLUE=$'\e[1;34m'    # Bright Blue
  E_BR_MAGENTA=$'\e[1;35m' # Bright Magenta
  E_BR_CYAN=$'\e[1;36m'    # Bright Cyan
  E_WHITE=$'\e[1;37m'      # White

  # ANSI background color codes
  #
  E_BG_BLACK=$'\e[40m'      # Black
  E_BG_RED=$'\e[41m'        # Red
  E_BG_GREEN=$'\e[42m'      # Green
  E_BG_YELLOW=$'\e[43m'     # Yellow
  E_BG_BLUE=$'\e[44m'       # Blue
  E_BG_MAGENTA=$'\e[45m'    # Magenta
  E_BG_CYAN=$'\e[46m'       # Cyan
  E_BG_GRAY=$'\e[47m'       # Gray
  E_BG_DARK_GRAY=$'\e[40m'  # Dark gray
  E_BG_BR_RED=$'\e[41m'     # Bright Red
  E_BG_BR_GREEN=$'\e[42m'   # Bright Green
  E_BG_BR_YELLOW=$'\e[43m'  # Bright Yellow
  E_BG_BR_BLUE=$'\e[44m'    # Bright Blue
  E_BG_BR_MAGENTA=$'\e[45m' # Bright Magenta
  E_BG_BR_CYAN=$'\e[46m'    # Bright Cyan
  E_BG_WHITE=$'\e[47m'      # White

else

  # ANSI foreground colors codes
  #
  E_BLACK=$'\e[38:5:0m'       # Black
  E_RED=$'\e[38:5:1m'         # Red
  E_GREEN=$'\e[38:5:2m'       # Green
  E_YELLOW=$'\e[38:5:3m'      # Yellow
  E_BLUE=$'\e[38:5:4m'        # Blue
  E_MAGENTA=$'\e[38:5:5m'     # Magenta
  E_CYAN=$'\e[38:5:6m'        # Cyan
  E_GRAY=$'\e[38:5:7m'        # Gray
  E_DARKGRAY=$'\e[38:5:8m'    # Dark Gray
  E_BR_RED=$'\e[38:5:9m'      # Bright Red
  E_BR_GREEN=$'\e[38:5:10m'   # Bright Green
  E_BR_YELLOW=$'\e[38:5:11m'  # Bright Yellow
  E_BR_BLUE=$'\e[38:5:12m'    # Bright Blue
  E_BR_MAGENTA=$'\e[38:5:13m' # Bright Magenta
  E_BR_CYAN=$'\e[38:5:14m'    # Bright Cyan
  E_WHITE=$'\e[38:5:15m'      # White

  # ANSI background color codes
  #
  E_BG_BLACK=$'\e[48;5;0m'       # Black
  E_BG_RED=$'\e[48;5;1m'         # Red
  E_BG_GREEN=$'\e[48;5;2m'       # Green
  E_BG_YELLOW=$'\e[48;5;3m'      # Yellow
  E_BG_BLUE=$'\e[48;5;4m'        # Blue
  E_BG_MAGENTA=$'\e[48;5;5m'     # Magenta
  E_BG_CYAN=$'\e[48;5;6m'        # Cyan
  E_BG_GRAY=$'\e[48;5;7m'        # Gray
  E_BG_DARK_GRAY=$'\e[48;5;8m'   # Dark gray
  E_BG_BR_RED=$'\e[48;5;9m'      # Bright Red
  E_BG_BR_GREEN=$'\e[48;5;10m'   # Bright Green
  E_BG_BR_YELLOW=$'\e[48;5;11m'  # Bright Yellow
  E_BG_BR_BLUE=$'\e[48;5;12m'    # Bright Blue
  E_BG_BR_MAGENTA=$'\e[48;5;13m' # Bright Magenta
  E_BG_BR_CYAN=$'\e[48;5;14m'    # Bright Cyan
  E_BG_WHITE=$'\e[48;5;15m'      # White
fi

# ANSI underline color codes
#
# Not in standard. implemented in Kitty, VTE, mintty, etc.
#
E_UL_BLACK=$'\e[58;5;0m'       # Black
E_UL_RED=$'\e[58;5;1m'         # Red
E_UL_GREEN=$'\e[58;5;2m'       # Green
E_UL_YELLOW=$'\e[58;5;3m'      # Yellow
E_UL_BLUE=$'\e[58;5;4m'        # Blue
E_UL_MAGENTA=$'\e[58;5;5m'     # Magenta
E_UL_CYAN=$'\e[58;5;6m'        # Cyan
E_UL_GRAY=$'\e[58;5;7m'        # Gray
E_UL_DARKGRAY=$'\e[58;5;8m'    # Dark Gray
E_UL_BR_RED=$'\e[58;5;9m'      # Bright Red
E_UL_BR_GREEN=$'\e[58;5;10m'   # Bright Green
E_UL_BR_YELLOW=$'\e[58;5;11m'  # Bright Yellow
E_UL_BR_BLUE=$'\e[58;5;12m'    # Bright Blue
E_UL_BR_MAGENTA=$'\e[58;5;13m' # Bright Magenta
E_UL_BR_CYAN=$'\e[58;5;14m'    # Bright Cyan
E_UL_WHITE=$'\e[58;5;15m'      # White

# ANSI Text attributes
E_RESET=$'\e[0m'              # Clear all attributes
E_BOLD=$'\e[1m'               # Bold text
E_DIM=$'\e[2m'                # Dim(low intensity) text
E_ITALIC=$'\e[3m'             # Italic text
E_UNDERLINE=$'\e[4m'          # Underlined text
E_UNDERLINE_DOUBLE=$'\e[4:2m' # Double underline (limited support)
E_UNDERLINE_CURLY=$'\e[4:3m'  # Curly underline (limited support)
E_UNDERLINE_DOT=$'\e[4:4m'    # Dotted underline (limited support)
E_UNDERLINE_DASH=$'\e[4:5m'   # Dashed underline (limited support)
E_BLINK=$'\e[5m'              # Blinking text
E_RAPID_BLINK=$'\e[6m'        # Rapid blink (Limited support)
E_REVERSE=$'\e[7m'            # Reverse color
E_CROSSED=$'\e[9m'            # Crossed over text
E_FRAKTUR=$'\e[20m'           # Gothic (limited support)
E_FRAMED=$'\e[51m'            # Framed (limited support)
E_OVERLINED=$'\e[53m'         # Overlined text
E_SUPERSCRIPT=$'\e[73m'       # Superscript text (limited support)
E_SUBSCRIPT=$'\e[74m'         # Subscript text (limited support)

# ANSI cursor operations
#
E_RETURN=$'\e[F'  # Move cursor to begining of line
E_UP=$'\e[A'      # Move cursor one line up
E_DOWN=$'\e[B'    # Move cursor one line down
E_FORWARD=$'\e[C' # Move cursor forward
E_BACK=$'\e[D'    # Move cursor backward
E_HIDE=$'\e[?25l' # Hide cursor
E_SHOW=$'\e[?25h' # Show cursor

# Default Bashplate colortheme
BP_C_OK="${E_BR_GREEN}"
BP_C_INFO="${E_BR_CYAN}"
BP_C_DEBUG="${E_BG_GREEN}${E_WHITE}"
BP_C_WARNING="${E_BR_YELLOW}"
BP_C_ERROR="${E_BR_RED}"
BP_C_CRITICAL="${E_BG_RED}${E_WHITE}"
BP_C_LINE="${E_DARKGRAY}"
BP_C_LINETEXT="${E_YELLOW}"
BP_C_DESCRIPTION="${E_CYAN}"
BP_C_KEY="${E_BR_MAGENTA}"

BP_C_FILENAME="${E_BR_CYAN}"
BP_C_PATH="${E_CYAN}"
BP_C_URL_SCHEME="${E_DARKGRAY}"
# BP_C_URL_USER=""
# BP_C_URL_HOST=""
BP_C_TIME="${E_BR_MAGENTA}"
BP_C_DATE="${E_MAGENTA}"

BP_C_QUERY=$'\e[38;5;194m'
BP_C_QUERY_DEF=$'\e[38;5;240m'
BP_C_EMPHASIS=$'\e[38;5;255m'
BP_C_DEEMPHASIS=$'\e[38;5;250m'

# Shellscript colorize colors
BP_C_RESERVED="${E_RED}"
BP_C_COMMENT="${E_CYAN}"
BP_C_STRING="${E_GREEN}"
BP_C_VAR="${E_BR_YELLOW}"

# Separator line character
BP_LINE_CHAR="-"

# Exit codes
#
BP_OK=0 # successful termination

# Formating
#
BP_KEY_LENGTH=24
BP_LEFT_MARGIN=3
BP_RIGHT_MARGIN=3

#---------------------------------------------------------------------
# Bashplate internal functions
#---------------------------------------------------------------------

##C- IHELP Printing functions

#
# $1 text to be printed
# $2 text color
# $3 line color
# $4 middle character
#
bpPrintLineGeneric() { ##I Print text with adjusted line after with selectable colors
  len1="${#1}"
  len4="${#4}"

  echo -en "${2}${1}${4}${3}"
  if [ "${BP_LINE_CHAR}" != "" ]; then
    l=$((BP_COLUMNS - len1 - len4))
    seq -s"${BP_LINE_CHAR}" "${l}" | tr -d '[:digit:]'
    echo -en "${E_RESET}"
  else
    echo -e "${E_RESET}"
  fi
}

#
# $1 text to be printed
# $2 text color
# $3 line color
#
bpTextLineC() { ##I Print text with adjusted line after with selectable colors
  bpPrintLineGeneric "$1" "$2" "$3" " "
}

bpPrintLine() { ##I Print text with line
  if [ "${#1}" -eq 0 ]; then
    bpPrintLineGeneric "" "" "${BP_C_LINE}" ""
  else
    bpPrintLineGeneric "$1" "${BP_C_LINETEXT}" "${BP_C_LINE}" " "
  fi
}

#
# $1 key color
# $2 description color
# $3 key
# $4 description
# $5 key length override (optional)
#
bpPrintDescGeneric() { # Generic key/description printout function
  KEY_COLOR="$1"
  DESC_COLOR="$2"
  KEY="$3"
  DESC="$4"
  if [ -n "$5" ]; then
    KL="$5"
  else
    KL=${BP_KEY_LENGTH}
  fi

  if ((${#4} == 0)); then
    printf "${1}  %-${KL}.${KL}s${E_RESET} ${2}%s${E_RESET}\n" "$3" ""
  fi

  len=${#}
  a=$(("${BP_COLUMNS}" - "$KL" - "$BP_RIGHT_MARGIN"))
  #LINES=$(fmt -s -w"${a}" <<<"$4")
  LINES=$(fold -w"${a}" <<<"$DESC")
  IFS=$'\n'
  L1=0
  for line in ${LINES}; do
    if [ "${L1}" -eq 0 ]; then                # First line
      if ((${#KEY} > "$BP_KEY_LENGTH")); then # Oversized key
        printf "${KEY_COLOR}  %-${KL}s${E_RESET}\n" "$KEY"
        printf "${KEY_COLOR}  %-${KL}.${KL}s${E_RESET} ${DESC_COLOR}%s${E_RESET}\n" "" "$line"
      else # Normal key
        printf "${KEY_COLOR}  %-${KL}.${KL}s${E_RESET} ${DESC_COLOR}%s${E_RESET}\n" "$KEY" "$line"
      fi
      L1=1
    else # Rest of the lines
      printf "${KEY_COLOR}  %-${KL}.${KL}s${E_RESET} ${DESC_COLOR}%s${E_RESET}\n" "" "$line"
    fi
  done
}

#
# $1 key
# $2 description
# $3 (optional) left alignment
#
bpPrintDesc() { ##I Print key description
  bpPrintDescGeneric "${BP_C_KEY}" "${BP_C_DESCRIPTION}" "$1" "$2" "$3"
}

bpPrintDescAlt() {
  bpPrintDescGeneric "${E_DARKGRAY}" "${BP_C_DESCRIPTION}" "$1" "$2"
}

#
# $1 variablename
# $2 alternative key text (optional)
# $3 alternative value text (optional)
#
bpPrintVar() { ##I Print variable value and description
  VAR="$1"

  if [ -n "$2" ]; then
    KEY=${2}
  else
    KEY="${VAR}"
  fi

  if [ "${!VAR}" ]; then
    if [ -n "$3" ]; then
      VAL=${3}
    else
      VAL="${!VAR}"
    fi

    bpPrintDesc "${KEY}" "${VAL}"
  else
    bpPrintDesc "${KEY}" "${BP_C_ERROR}N/A"
  fi
}

#
# Colorize string containing filename
#
# $1 string with filename to colorize
# ret colorized string
#
bpColorizeFile() { ##I Colorize string containing filename
  echo "${BP_C_PATH}$(dirname "$1")/${BP_C_FILENAME}$(basename "$1")${E_RESET}"
}

#
# $1 string with url to colorize
# ret colorized string
#
# todo: give username and port own color
#
bpColorizeUrl() { ##I Colorize string containing URL
  URL=$(sed -r -e "s/^.*\/\///" <<<"$1")
  SCHEME=$(sed -r -e "s/:\/.*//" <<<"$1")
  # USERNAME=$(sed -r -e "s/@.*//" <<<"$URL")
  # PORT=$(sed -r -e "s/^:[0-9]*/XXX/" <<<"$URL")
  # echo -e "Username: $USERNAME"
  # echo -e "Port: $PORT"

  #URL=$(echo -n "$1" | sed -r -e "s/^.*\/\///")
  #SCHEME=$(echo -n "$1" | sed -r -e "s/:\/.*//")

  echo -e -n "${BP_C_URL_SCHEME}${SCHEME}${E_RESET}://$(bpColorizeFile "${URL}")"
}

#
# $1 string to be filtered
#
bpFilterEscape() { ##I Filter escape characters from string
  echo "$1" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"
}

##C- IHELP File operations

#
# $1 directory to change to
#
bpCd() { ##I Safe cd function (exits on fail)
  cd "$1" || bpExit "Failed to cd to [$1]"
}

#
# $1 Directory to be created
#
bpMkDir() { ##I Create a directory if it does not exist
  if [ ! -d "$1" ]; then
    if mkdir -p "$1"; then
      bpOk "Creating directory $(bpColorizeFile "${1}")."
      return 0
    else
      bpError "Failed to create directory $(bpColorizeFile "${1}")."
      return 1
    fi
  fi
}

#
# $1 target file/dir
# $2 link
#
bpLn() { ##I Create symbolic link
  if [ ! -L "$1" ]; then
    if ln -sf "${1}" "${2}"; then
      bpOk "Creating link $(bpColorizeFile "${2}")."
      return 0
    else
      bpError "Failed to create link $(bpColorizeFile "${2}")."
      return 1
    fi
  fi
}

#
# $1 file(s) to be copied
# $2 destination
#
bpCp() { ##I Copy file(s)
  if cp -rf "$@"; then
    bpOk "Copying $(bpColorizeFile "${1}") to $(bpColorizeFile "${2}")"
    return 0
  else
    bpError "Failed copying $(bpColorizeFile "${1}") to $(bpColorizeFile "${2}")"
    return 1
  fi
}

#
# $1 file(s) to be moved
# $2 destination
#
bpMv() { ##I Move file(s)
  if mv "$1" "$2"; then
    bpOk "Moving file $(bpColorizeFile "${1}") to $(bpColorizeFile "${2}")."
    return 0
  else
    bpError "Failed moving file $(bpColorizeFile "${1}") to $(bpColorizeFile "${2}")."
    return 1
  fi
}

#
# $1 file(s) to be removed
#
bpRm() { ##I Remove file(s)
  if rm -rf "${1}"; then
    bpOk "Removing file $(bpColorizeFile "${1}")."
    return 0
  else
    bpError "Failed removing file $(bpColorizeFile "${1}")."
    return 1
  fi
}

#
# $1 file to be backed up
#
bpBackup() { ##I Make backup of file
  BF="${1}_$(date +"%Y%m%d")-$(date +"%H%M%S").bak"

  if cp -rf "$1" "${BF}"; then
    bpOk "Backing up file $(bpColorizeFile "$1") to $(bpColorizeFile "${BF}")."
    return 0
  else
    bpError "Failed backing up file $(bpColorizeFile "$1") to $(bpColorizeFile "${BF}")."
    return 1
  fi
}

##C- IHELP File editing

#
# $1 file
# $2 text to replace
# $3 new text
#
bpReplace() { ##I Replace all ocurances of text in file
  sed -i -e "s/${2}/${3}/g" "$1"
}

#
# $1 file
# $2 pattern matching line
# $3 new text
#
bpReplaceLine() { ##I Replace entire line matching pattern
  sed -i -e "0,/${2}/s/${2}.*/${3}/" "${1}"
}

#
# $1 file
# $2 line to append
#
bpAppendIfNoSuchLine() { ##I Append a line if it does not exist in file
  grep -q -F "$2" "$1" || echo "$2" >>"$1"
}

#
# $1 file
# $2 string
#
bpRemoveLineContaining() { ##I Remove line in file if it contains given string
  grep -v "$2" "$1" >"${1}_tmp"
  mv -f "${1}_tmp" "${1}"
}

#
# $1 file
# $2 string
# return true if existing
#
bpStrExist() { ##I Check if string exist in file
  if [ ! -f "$1" ]; then
    return 1
  fi

  if grep -q -F "$2" "$1"; then
    return 0
  else
    return 1
  fi
}

#
# $1 file to open in editor
# $2 override editor (optional)
#
bpEdit() { ##I Open file in editor set by BP_EDIT variable

  if [ -n "$2" ]; then
    bpRun "$2" "$1"
    return 0
  fi

  if [ -n "$BP_EDITOR" ]; then
    bpRun "${BP_EDITOR}" "${1}"
  else
    bpError "BP_EDITOR variable not set, can't open file ${1}"
  fi
}

#
# $1 file
# $2 start marker
# $3 end marker
#
bpGetSection() { ##I Get text from file between two markers
  grep -A 10000 -m 1 "$2" <"$1" | grep -B 10000 -m 1 "$3" | grep -v "$2" | grep -v "$3"
}

#
# $1 File to import
#
bpImport() { ## Import file into variable
  if [ -f "$1" ]; then
    cat "$1"
  fi
}

#
# $1 file
# $2 match
# $3 text to insert
#
bpInsert() { ##I Insert text into file
  a=$(grep -A 10000 "$2" <"$1" | grep -v "$2")
  b=$(grep -B 10000 "$2" <"$1" | grep -v "$2")

  echo "$b" "$3" "$a" >|"$1"
}

##C- IHELP Input

#
# $1  Question string
# $2  Default value
# return string read from cmdline/default if enter pressed
#
bpReadGeneric() { ##I Read from commandline
  QUERY="$1"
  DEFAULT="$2"

  read -er -i "$DEFAULT" -p "${BP_C_QUERY}${1}${E_RESET} > " RESULT
  if [ "${RESULT}" == "" ]; then
    RESULT="${2}"
  fi
  echo "${RESULT}"
}

#
# $1  Question string
# $2  Default value
# return string read from cmdline/default if enter pressed
#
bpReadStr() { ##I Read string from commandline
  QUERY="$1"
  DEFAULT="$2"

  RESULT=$(bpReadGeneric "$QUERY" "$DEFAULT")
  bpLogInfo "User entered: $RESULT  ($QUERY)"
  echo "${RESULT}"
}

#
# $1  Question string
# $2  Default value
# $3  min value
# $4  max value
# return integer read from cmdline/default if enter pressed
#
bpReadInt() { ##I Read integer from commandline
  QUERY="$1"
  DEFAULT="$2"
  MIN="$3"
  MAX="$4"

  RANGE=""
  if [ -n "$MIN" ] || [ -n "$MAX" ]; then
    RANGE=" ${BP_C_QUERY_DEF}[${E_RESET}$3-$4${BP_C_QUERY_DEF}]${E_RESET}"
  fi

  while true; do
    read -er -i "$DEFAULT" -p "${BP_C_QUERY}${1}${E_RESET}${RANGE} > " RESULT

    if [ "$RESULT" -eq "$RESULT" ] 2>/dev/null; then

      if [ -n "${RANGE}" ]; then
        #if [ -n "$MIN" ] && [ -n "$MAX" ]; then
        if [ $((RESULT)) -ge "$MIN" ] && [ $((RESULT)) -le "$MAX" ]; then
          break
        fi
      else
        break
      fi
    fi
  done
  bpLogInfo "User entered: $RESULT  ($QUERY)"
  echo "${RESULT}"
}

#
# $1 question text
# $2 default answer 0 = yes, 1 = no
# return 0 = Yes, 1=No
#
bpReadBool() { ##I Ask yes/no question generic
  QUERY="$1"
  DEFAULT="$2"
  while true; do

    if [ "$2" -eq 1 ]; then
      yn=$(bpReadGeneric "${BP_C_QUERY}${1}${E_RESET} ${BP_C_QUERY_DEF}[${BP_C_DEEMPHASIS}y${BP_C_QUERY_DEF}/${BP_C_EMPHASIS}N${BP_C_QUERY_DEF}]${E_RESET}")
    else
      yn=$(bpReadGeneric "${BP_C_QUERY}${1}${E_RESET} ${BP_C_QUERY_DEF}[${E_RESET}${BP_C_EMPHASIS}Y${BP_C_QUERY_DEF}/${BP_C_DEEMPHASIS}n${BP_C_QUERY_DEF}]${E_RESET}")
    fi

    case "$yn" in
    [Yy]*)
      bpLogInfo "User entered: Yes  ($QUERY)"
      return 0
      break
      ;;
    [Nn]*)
      bpLogInfo "User entered: No  ($QUERY)"
      return 1
      break
      ;;
    "")
      if [ "$2" -eq 0 ]; then
        bpLogInfo "User entered: Yes  ($QUERY)"
      else
        bpLogInfo "User entered: No  ($QUERY)"
      fi
      return "$2"
      break
      ;;
    *) echo "Please answer yes or no." ;;
    esac
  done
}

#
# $1 Question text
# return 0 = Yes, 1=No
#
bpReadBoolDY() { ##I Ask yes/no question default yes
  bpReadBool "$1" 0
  return $?
}

#
# $1 Question text
# return 0 = Yes, 1=No
#
bpReadBoolDN() { ##I Ask yes/no question default no
  bpReadBool "$1" 1
  return $?
}

bpPrintChoiceList() { # Print items in selection list
  echo
  arr=("${@:2}")
  len=${#arr[@]}
  i=1
  while [ "$i" -lt "$len" ]; do
    key=${arr[$i]}
    ((i++))
    val=${arr[$i]}
    ((i++))
    desc=${arr[$i]}
    ((i++))

    if [ "$key" == "$1" ]; then
      default=">"
    else
      default=" "
    fi

    if [ "${desc}" == ":" ]; then
      printf "${BP_C_KEY} %-5s${E_RESET}%1s  ${BP_C_DESCRIPTION}%s${E_RESET}\n" "$key" "$default" "$val"
    else
      printf "${BP_C_KEY} %-5s${E_RESET}%1s  ${BP_C_DESCRIPTION}%s${E_RESET}\n" "$key" "$default" "$desc"
    fi
  done
}

#
# Select from list of choices
#
# $1 Default value
# $2 Question
# $* Array of choices
#
# Return: bpReturn
#
# Example choice list.
# list=(
#  "a" ":" "Choice A"
#  "b" ":" "Choice B"
#  "c" ":" "Choice C"
# )
bpSelectFromList() { ##I Select from list
  QUERY="$2"
  while true; do
    bpPrintChoiceList "$1" "${@:2}"
    echo
    x=$(bpReadGeneric "$2" "$1")

    arr=("${@}")
    len=${#arr[@]}
    i=2
    while [ "$i" -lt "$len" ]; do
      key=${arr[$i]}
      ((i++))
      val=${arr[$i]}
      ((i++))
      ((i++))
      if [ "$key" == "$x" ]; then
        if [ "$val" == ":" ]; then
          bpReturn="${key}"
        else
          bpReturn="${val}"
        fi
        bpLogInfo "User entered: $bpReturn  ($QUERY)"
        return 0
      fi
    done
  done
}

# Settings file ------------------------------------------------------

##C- BP_CONF Bashplate config file
##C- IHELP Bashplate config file

#
# $1 config file
# $2 key
# $3 value
# $4 description
#
bpAddSetting() { ##I Add setting to config file
  if ! bpStrExist "${1}" "${2}"; then
    {
      echo "# ${4}"
      echo "${2}=\"${3}\""
      echo
    } >>"${1}"

    bpOk "Added setting \"$2=$3\""
  fi
}

# Change setting in config file (key value pair)
#
# $1 config file
# $2 key
# $3 value
# $4 description
#
bpChangeSetting() { ##I Change setting in config file
  FILE="$1"
  KEY="$2"
  VAL="$3"
  DESC="$4"
  if ! bpStrExist "${1}" "${KEY}"; then
    bpAddSetting "$FILE" "$KEY" "$VAL" "$DESC"
  fi
  sed -i "s/^\(${KEY}\s*=\s*\).*\$/\1${VAL}/" "${FILE}"
  bpOk "Changing ${KEY} to ${VAL}"
}

#
# $1 key
# $2 config array
#
bpConfGetDesc() { ##I Get config desription
  arr=("${@:1}")
  len=${#arr[@]}
  bpReturn=""
  i=1
  while [ "$i" -lt "$len" ]; do
    key=${arr[$i]}
    ((i++))
    def=${arr[$i]}
    ((i++))
    desc=${arr[$i]}
    ((i++))
    #echo "$key"
    if [ "$key" == "$1" ]; then
      echo "$desc"
      return 0
    fi
  done
  return 1
}

#
# $1 key
# $2 value
# $3 config array
#
bpConfChangeSetting() {
  KEY="$1"
  VAL="$2"
  CONF=("${@:2}")
  FILE=${CONF[1]}
  DESC=$(bpConfGetDesc "$KEY" "${CONF[@]}")

  if ! bpConfInList "$KEY" "${CONF[@]}"; then
    bpError "\"$KEY\" is not a valid setting"
    return
  fi

  if ! bpStrExist "${FILE}" "${KEY}"; then
    bpAddSetting "${FILE}" "$KEY" "$VAL" "${DESC}"
    return "$BP_OK"
  fi

  bpChangeSetting "$FILE" "$KEY" "$VAL" "$DESC"
}

#
# $1 File
# $2 Headertext
# $3 config array
#
bpConfCreate() { ##I Create configuration file
  FILE="$1"
  {
    echo "# "
    echo "# $2"
    echo "# "
    echo
  } >>"${FILE}"

  arr=("${@:2}")
  len=${#arr[@]}
  i=1
  while [ "$i" -lt "$len" ]; do
    key=${arr[$i]}
    ((i++))
    default=${arr[$i]}
    ((i++))
    desc=${arr[$i]}
    ((i++))
    bpAddSetting "$FILE" "$key" "$default" "$desc"
  done
}

#
# $1 Config file
#
bpConfLoad() { ##I Load config file
  if [ -n "${1}" ]; then
    if [ ! -e "${1}" ]; then
      bpConfCreate "${@}"
    fi
    source "${1}"
  fi
}

#
# $1 key
# $2 config array
#
bpConfInList() { ##I Check if key exist in config file list
  arr=("${@:1}")
  len=${#arr[@]}
  bpReturn=""
  i=3
  while [ "$i" -lt "$len" ]; do
    key=${arr[$i]}
    ((i++))
    def=${arr[$i]}
    ((i++))
    desc=${arr[$i]}
    ((i++))
    #echo "Key = $key  Default = $def  Desc = $desc"
    if [ "$key" == "$1" ]; then
      bpReturn="$key"
      return 0
    fi
  done
  return 1
}

bpConfPrint() { ##I Print settings in config list
  echo
  bpPrintDesc "Config file" "$(bpColorizeFile "$3")"
  echo
  arr=("${@:4}")
  i=1
  while [ "$i" -lt ${#arr[@]} ]; do
    KEY=${arr[$i]}
    ((i++))
    DEF=${arr[$i]}
    ((i++))
    DESC=${arr[$i]}
    ((i++))
    printf "%s%s\n" "${E_DARKGRAY}" "${DESC}"
    bpPrintVar "$KEY"
  done
}

bpset() { ##C BP_CONF Change setting in bp config file
  if [ -z "$2" ]; then
    bpConfPrint "" "" "${BP_CONFIG_LIST[@]}"
    return
  fi
  if bpConfInList "$2" "${BP_CONFIG_LIST[@]}"; then
    bpChangeSetting "${BP_CONFIG_FILE}" "${bpReturn}" "\"${3}\""
    return
  fi
  bpError "\"$2\" is not a valid setting"
}

##C- IHELP Bashrc path/module handling

bpLsPaths() { ##I List paths
  shopt -s nullglob dotglob
  for p in "${BP_CONFIG_PATHS}"/*; do
    echo "A: $(readlink "${p}")"
  done
}

#
# $1 directory to add to path
#
bpAddPath() { ##I Add dir to PATH variable
  ll=$(echo "${1}" | sed -e 's/\//_/g')

  bpInfo "Adding PATH \"${2}\""
  if [ ! -L "$1" ]; then
    bpLn "${1}" "${BP_CONFIG_PATHS}/${ll}"
  fi
}

bpRmPath() { ##I Remove path
  bpRm "${BP_CONFIG_PATHS}/${1}"
}

bpLsModules() { ##I List modules
  shopt -s nullglob dotglob
  for p in "${BP_CONFIG_MODULES}"/*; do
    readlink "${p}"
  done
}

bpAddModule() { ##I Add init script to
  m=$(realpath "${1}")
  if [ ! -L "$m" ]; then
    rm -f "${BP_CONFIG_MODULES}/$(basename "${m}")"
    bpLn "$m" "${BP_CONFIG_MODULES}/."
  fi
}

bpRmModule() { ##I Remove module
  bpRm "${BP_CONFIG_MODULES}/${1}"
}

##-

# Logging ---------------------------------------------------------

##C- IHELP Log functions

#
# Function logging to file
#
# $1 String to log to file
#
bpLog() { ##I Log to file command
  # check for BP_LOGFILE variable
  if [ -n "$BP_LOGFILE" ]; then
    ts=$(date +"%Y-%m-%d %H:%M:%S")
    bpFilterEscape "$ts $1" >>"${BP_LOGFILE}"
  fi
}

bpLogOk() { ##I Log Ok message to file
  bpLog "[ Ok ] $1"
}

bpLogInfo() { ##I Log Info message to file
  bpLog "[Info] $1"
}

bpLogDebug() { ##I Log Info message to file
  bpLog "[Debg] $1"
}

bpLogWarning() { ##I Log Warning message to file
  bpLog "[Warn] $1"
}

bpLogError() { ##I Log Error message to file
  bpLog "[Erro] $1"
}

bpLogCritical() { ##I Log Critical message to file
  bpLog "[Crit] $1"
}

log() { ##C BP_LOGFILE View logfile
  if [ -n "$BP_LOGFILE" ]; then
    if [ -f "${BP_LOGFILE}" ]; then # Check that logfile exists
      D=$(sed -r -e "s|\[Info\]|\[\\${BP_C_INFO}Info\\${E_RESET}\]|" \
        -e "s|\[Warn\]|\[\\${BP_C_WARNING}Warn\\${E_RESET}\]|" \
        -e "s|\[Erro\]|\[\\${BP_C_ERROR}Erro\\${E_RESET}\]|" \
        -e "s|\[ Ok \]|\[\\${BP_C_OK} Ok \\${E_RESET}\]|" \
        -e "s/[-0-9]+/\\${BP_C_DATE}&\\${E_RESET}/1" \
        -e "s/[:0-9]+/\\${BP_C_TIME}&\\${E_RESET}/6" \
        -e "s|\[Crit\]|\[\\${E_BG_RED}\\${E_WHITE}Crit\\${E_RESET}\]|" <"${BP_LOGFILE}")
      echo -e "$D"
    fi
  else
    bpInfo "Logging is not activated"
    bpExit
  fi
}

mlog() { ##C BP_LOGFILE Monitor logfile
  if [ -n "$BP_LOGFILE" ]; then
    if [ -f "${BP_LOGFILE}" ]; then # Check that logfile exists
      tail -f "${BP_LOGFILE}" | sed -r -e "s|\[Info\]|\[\\${BP_C_INFO}Info\\${E_RESET}\]|" \
        -e "s|\[Warn\]|\[\\${BP_C_WARNING}Warn\\${E_RESET}\]|" \
        -e "s|\[Erro\]|\[\\${BP_C_ERROR}Erro\\${E_RESET}\]|" \
        -e "s|\[ Ok \]|\[\\${BP_C_OK} Ok \\${E_RESET}\]|" \
        -e "s/[-0-9]+/\\${E_GREEN}&\\${E_RESET}/1" \
        -e "s/[:0-9]+/\\${E_BR_GREEN}&\\${E_RESET}/6" \
        -e "s|\[Crit\]|\[\\${E_BG_RED}\\${E_WHITE}Crit\\${E_RESET}\]|"
    fi
  else
    bpInfo "Logging is not activated"
    bpExit
  fi
}

##C- IHELP Message

bpOk() { ##I Success message
  if [ -n "$BP_LOG_OK" ]; then
    bpLogOk "$1"
  fi
  echo -e "[${BP_C_OK}Ok${E_RESET}] $1"
}

bpInfo() { ##I Info message
  if [ -n "$BP_LOG_INFO" ]; then
    bpLogInfo "$1"
  fi
  echo -e "[${BP_C_INFO}Info${E_RESET}] $1"
}

bpDebug() { ##I Debug message
  if [ -z "$BP_DEBUG" ]; then
    return
  fi
  if [ -n "$BP_LOG_INFO" ]; then
    bpLogDebug "$1"
  fi

  echo -e "[${BP_C_DEBUG}Dbg${E_RESET}] $1"
}

bpWarning() { ##I Warning message
  if [ -n "$BP_LOG_WARNING" ]; then
    bpLogWarning "$1"
  fi
  echo -e "[${BP_C_WARNING}Warning${E_RESET}] $1"
}

bpError() { ##I Error message
  if [ -n "$BP_LOG_ERROR" ]; then
    bpLogError "$1"
  fi
  echo -e "[${BP_C_ERROR}Error${E_RESET}] $1"
}

bpCritical() { ##I Critical error message
  if [ -n "$BP_LOG_CRITICAL" ]; then
    bpLogCritical "$1"
  fi
  echo -e "[${BP_C_CRITICAL}Critical${E_RESET}] $1"
  bpExit
}

# Various  ---------------------------------------------------------

##C- IHELP Assert

bpAssertRoot() { ##I Assert that user is root
  if [ "$(whoami)" != root ]; then
    bpError "Must be root to use this command."
    bpExit "1"
  fi
}

bpAssertNoLockFile() { ##I Assert that lockfile is not present
  if [ -n "$BP_LOCK_FILE" ]; then
    if [ -f "$BP_LOCK_FILE" ]; then
      bpError "Script is already running. (${BP_LOCK_FILE})"
      exit "1" # do not use bpExit because lock file belongs to prexsisting process
    fi
    touch "$BP_LOCK_FILE"
  fi
}

#
# $1 string list of programs that are required
#
bpAssertProgs() { ##I Assert that required programs are available on the system
  things=("$@")
  e=0
  for thing in "${things[@]}"; do
    hash "$thing" 2>&- ||
      {
        bpError "Required program \"$thing\" not found."
        e=1
      }
  done
  if [ "$e" -eq 1 ]; then
    bpExit 1
  fi
}

##C- IHELP Misc

#
# $1 command to check
#
bpHasCmd() { ##I Check whether a command exists in path and is executable
  if [ -x "$(command -v "${1}")" ]; then
    return 0
  else
    return 1
  fi
}

bpIsFunction() { ##I Check if and identifier is declared as a function
  if [ "$(type -t "$1")" == "function" ]; then
    return 0
  fi
  return 1
}

#
# Filter out function from script file
#
# $1 file
# $2 function
#
bpGetFunction() {
  grep --no-filename -A 60 "$1" -e "${2}()" | grep -B 60 -m 1 -x "}"
}

#
# $1 command to execute
#
bpRun() { ##I Execute command
  if ! bpHasCmd "${1}"; then
    bpError "Could not execute $1, command does not exist!"
    return 1
  fi

  "$@"
  return $?
}

##C- IHELP Debug/Controll

icheck() { ##I Run shellcheck on script
  bpAssertProgs "shellcheck"
  shellcheck "$0"
}

irt() { ##I Remove tabs from script
  sed -i -e 's/\t/  /g' "${BP_SELF_DIR}/${BP_SELF}"
}

##C- IHELP Help & info

printCommand() {
  IFS=$' '
  read -r -a LINE <<<"$1"
  DESC="${LINE[*]:3}"
  bpPrintDesc "${LINE[0]}" "${DESC}"
}

printCondCommand() {
  IFS=$' '
  read -r -a LINE <<<"$1"
  DESC="${LINE[*]:4}"
  COND=${LINE[3]}

  if [ -n "$IHELP" ] && [ "$COND" != "IHELP" ]; then
    return
  fi

  if [ -n "${!COND}" ]; then
    bpPrintDesc "${LINE[0]}" "${DESC}"
    return
  fi

  if [ "$2" -eq 1 ]; then
    bpPrintDescAlt "${LINE[0]}" "${DESC}"
  fi

}

printNamedLine() {
  IFS=$' '
  read -r -a LINE <<<"$1"
  bpPrintLine "${LINE[*]:1}"
}

printCondNamedLine() {
  IFS=$' '
  read -r -a LINE <<<"$1"
  DESC=${LINE[*]:2}
  COND=${LINE[1]}

  if [ -n "$IHELP" ] && [ "$COND" != "IHELP" ]; then
    return
  fi

  if [ -n "${!COND}" ]; then
    bpPrintLine "$DESC"
  fi
}

help() { ##D Print help information
  echo "$BP_USAGE"
  echo -e "$BP_DESC"
  echo

  BP_HELP=1

  if [ ! -e "${BP_CONFIG_DIR}" ] && [ -n "${BP_CONFIG}" ]; then
    BPINIT=1
  fi

  # bpExecHook "PRE_HELP_HOOK"
  if [ -n "$PRE_HELP_HOOK" ]; then
    "${PRE_HELP_HOOK}"
  fi

  IFS=$'\n'
  SC="$1"
  LINES=$(grep -h '##' "$0" | grep -v -e 'grep' -e '##I' -e '##V' -e '\*##C' -e '\*##C-' -e '\"##' -e '##-//' -e 'LINE' -e 'printLine')
  LINES="${LINES//()/}"

  for LINE in ${LINES}; do
    case "$LINE" in
    *"##-"*) printNamedLine "$LINE" ;;
    *"##C-"*) printCondNamedLine "$LINE" ;;
    *"##CV"*) printCondCommand "$LINE" 1 ;;
    *"##C"*) printCondCommand "$LINE" 0 ;;
    *"##D"*) printCommand "$LINE" '##D' ;;
    *) ;;

    esac
  done

  if [ -n "$POST_HELP_HOOK" ]; then
    "${POST_HELP_HOOK}"
  fi
}

#
# $1 command
#
ihelp() { ##I Print internal help information

  # Singe command documentation
  if [ "$2" != "" ]; then
    echo
    bpPrintLine "$2"
    echo
    echo "#"
    echo -n "# "
    grep --no-filename "$0" -e "${2}()" | sed -n -e 's/^.*##I //p'
    grep --no-filename -B 8 "$0" -e "${2}()" | grep "#" | grep -v "##"
    bpPrintLine
    bpExit
  fi

  IFS=$'\n'
  SC="$1"

  IHELP=1      # Force ihelp documentations
  BP_LOGFILE=1 # Force log documentation

  LINES=$(grep -h '##[C|I]' "$0" | grep -v -e 'grep' -e '\*"##[ A-Z]"\*' -e 'LINE' -e 'printNamedLine' -e 'awk' -e 'bpPrintDesc' -e 'name')
  LINES=$(echo -e "$LINES" | sed -s 's/()//g')

  for LINE in ${LINES}; do
    case "$LINE" in
    *"##C-"*) printCondNamedLine "$LINE" ;;
    *"##I"*) printCommand "$LINE" '##I' ;;
    *"##C"*) printCondCommand "$LINE" 0 ;;
    *) ;;

    esac
  done

  bpPrintLine "Bashplates comments"
  bpPrintDesc "##D Description" "Subcommand information comment (shown with help)"
  bpPrintDesc "##C COND Description" "Conditional subcommand comment (shown with help)"
  bpPrintDesc "##I Description" "Internal function comment (shown with ihelp)"
  bpPrintDesc "##- [Text]" "Separator line (shown with help)"
  bpPrintDesc "##C- COND [Text]" "Conditional separator line (shown with help)"
  bpPrintLine
}

iinfo() { ##I Show information about script
  bpPrintLine "Script information"
  bpPrintVar BP_SELF "Script" "$(bpColorizeFile "${BP_SELF_DIR}/${BP_SELF}")"
  bpPrintVar BP_VERSION "Script version"
  bpPrintVar BP_TEMPLATE_VERSION "Template version"
  bpPrintVar BP_CONFIG "Bashplate settings file" "$(bpColorizeFile "${BP_CONFIG}")"
  bpPrintVar BP_LOGFILE "Log file" "$(bpColorizeFile "${BP_LOGFILE}")"
  bpPrintVar BP_LOCK_FILE "Lock file" "$(bpColorizeFile "${BP_LOCK_FILE}")"
  bpPrintVar DEFAULT_CMD_HOOK "Default function"
  bpPrintDesc "PID" $$
  bpPrintVar BP_DATE "Date"
  bpPrintVar BP_TIME "Time"
  bpPrintVar BP_COLUMNS "Terminal columns"
  bpPrintVar BP_LINES "Terminal lines"

  if [ -n "${POST_INFO_HOOK}" ]; then
    bpPrintLine "App. information"
    ${POST_INFO_HOOK}
  fi

  if [ -z "$BP_CONF" ]; then
    bpPrintLine
    return
  fi
  bpPrintLine "Bashplate config"
  i=2
  while [ "$i" -lt ${#BP_CONFIG_LIST[@]} ]; do
    KEY=${BP_CONFIG_LIST[$i]}
    ((i++))
    ((i++))
    ((i++))
    bpPrintVar "$KEY"
  done

  bpPrintLine
}

iview() { ##I View example
  # Singe command documentation
  if [ "$2" == "" ]; then
    bpExit
  fi

  echo
  if bpHasCmd batcat; then # Use batcat, if available, to view function
    bpGetFunction "$0" "${2}" | batcat --language bash --decorations never
  else
    bpGetFunction "$0" "${2}" |
      sed -e "s/#.*/\\${BP_C_COMMENT}&\\${E_RESET}/" \
        -e "s/\<echo\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<if\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<then\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<else\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<fi\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<do\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<done\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<elif\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<case\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<esac\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<for\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<in\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<select\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<time\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<until\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<select\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<eval\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<break\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<while\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\".*\"/\\${BP_C_STRING}&\\${E_RESET}/" \
        -e "s/\([^=]*\)=/${BP_C_VAR}\1\\${E_RESET}=/"
  fi
  bpPrintLine
  bpExit
}

ivars() { ##I Print internal variables
  bpPrintLine "Script variables"
  echo
  IFS=$'\n'
  LINES=$(grep -v -e 'LINES' -e 'LINE' "$0" | grep -A 1 '##V') # | sed "s/--//" )
  for line in ${LINES}; do
    if [ "$line" == "--" ]; then
      echo
    else
      LINE=$(echo "${line}" | sed -u -e "s/##V[ ]/${BP_C_DESCRIPTION}/i" -e "s/^.*=/${BP_C_KEY}&${E_RESET}/i" -e "s/=/${E_RESET}=/")
      echo -e "$LINE"
      echo -en "$E_RESET"
    fi
  done
  echo
}

ied() { ##I Open this file with default editor
  bpEdit "$0" "$2"
}

version() { ##D Print version information
  echo "$BP_VERSION"
}

# Runs a function in this file as a command
bpRunCommand() {
  if [ "$BP_ARGUMENTS" -eq 0 ]; then

    # check for a default command
    if [ -n "$DEFAULT_CMD_HOOK" ]; then
      "$DEFAULT_CMD_HOOK" "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
      bpExit
    fi
    bpErrorExit "No command given"
  fi

  if [ "$(type -t "$1")" != "function" ]; then # Check if subcommand is declared as function
    bpErrorExit "Command \"$1\" not found"
  fi

  command=$1
  # execute pre command hook  if existing
  if [ -n "$PRE_CMD_HOOK" ]; then
    "${PRE_CMD_HOOK}" "$command"
  fi

  # Check if command is conditional
  CL=$(grep -E "${command}().*##C" "$0")
  if [[ "$CL" = *"##C"* ]]; then

    # Check if condition is true and then execute else printout error message
    read -r -a ARR <<<"$CL"
    CV="${ARR[3]}"
    if [ -n "$CV" ]; then
      if [ -n "${!CV}" ]; then
        # execute command
        "${command}" "$@"
      else
        bpError "Command \"$command\" not available right now."
      fi
    else
      bpError "Command \"$command\" is conditional, but is missing conditional variable"
    fi
  else
    # command is not conditional, execute
    "${command}" "$@"
  fi

  # execute post command hook  if existing
  if [ -n "$POST_CMD_HOOK" ]; then
    "${POST_CMD_HOOK}" "$command"
  fi
  bpExit
}

#---------------------------------------------------------------------
# Initiate internal variables
#---------------------------------------------------------------------

##V Bashplate version
BP_TEMPLATE_VERSION="1.40beta2"

##V Directory where script is located
BP_SELF_DIR="${0%/*}"

##V Name of script
BP_SELF_NAME=$(basename "$0")

##V Name of script (to be repurposed)
BP_SELF=$(basename "$0")

##V Number of arguments given to script
BP_ARGUMENTS=$#

##V Current date
BP_DATE=$(date +"%Y-%m-%d")

##V Current time
BP_TIME=$(date +"%H:%M:%S")

##V Number of columns in terminal
BP_COLUMNS=$(tput cols)

##V Number of lines in terminal
BP_LINES=$(tput lines)

##V Settings directory
BP_CONFIG_DIR=~/.config/bashplates

##V Settings file
BP_CONFIG_FILE=${BP_CONFIG_DIR}/bashplates.conf

##V System Path's
BP_CONFIG_PATHS="${BP_CONFIG_DIR}/path"

##V Links to modules
BP_CONFIG_MODULES="${BP_CONFIG_DIR}/modules"

BP_SUDO=false

# Initiate bashplate settings
bpInitSettings

# Initiate user settings
bpUserSettings

#---------------------------------------------------------------------
# Setup signal traps
#---------------------------------------------------------------------

trap signalQuit SIGQUIT
trap signalInt SIGINT
trap signalHup SIGHUP
trap signalTerm SIGTERM
trap 'signalErr ${FUNCNAME} ${LINENO}' ERR

#trap  'signalDbg ${FUNCNAME} ${LINENO}' DEBUG

#---------------------------------------------------------------------
# Load settings and execute script handler
#---------------------------------------------------------------------

BP_CONFIG_LIST=(
  "${BP_CONFIG_FILE}"
  "Bashplates common settings"
  "BP_NAME" "John Doe" "Users name"
  "BP_EMAIL" "john.doe@foo.bar" "Users email"
  "BP_ORG" "ACME" "Organisation"
  "BP_HOME" "www.foo.bar" "Home"
  "BP_LICENSE" "MIT" "Default license"
  "BP_EDITOR" "vi" "Default editor"
  "BP_DIFF" "meld" "Default diff program"
  "BP_GITSERVER" "github.com" "Default git server"
  "BP_GITUSER" "" "Default git user"
  "BP_GITPROTO" "http" "Default git protocol"
)

# Load configuration file settings
bpConfLoad "${BP_CONFIG_LIST[@]}"

# execute prescript hook if existing
if [ -n "$PRE_SCRIPT_HOOK" ]; then
  ${PRE_SCRIPT_HOOK} "$@"
fi

# Run command parser
bpRunCommand "$@"

# Exit cleanly
bpExit

##C- BP_HELP
