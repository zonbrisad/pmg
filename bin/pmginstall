#!/usr/bin/env bash
# shellcheck disable=2034
# shellcheck disable=2317
# shellcheck disable=1090
#---------------------------------------------------------------------
#
#  [Description]
#  Linux admin help script
#
#  [Author]
#    Peter Malmberg <peter.malmberg@gmail.com>
#
#  [Date]
#    2016-xx-xx
#
#  [License]
#     MIT
#
#---------------------------------------------------------------------
# Generated with bashplates. [https://github.com/zonbrisad/bashplates]
#---------------------------------------------------------------------
#

# Display commands as they are executed
#set -o xtrace
# Display shell input lines as they are read
#set -v

# Exit script when a command fails. Append ||true if error is expected
#set -o errexit # || true
# Exit script when undeclared variable is used
#set -o nounset
# Exit script when pipe fails
#set -o pipefail

#---------------------------------------------------------------------
# User defined Settings
#---------------------------------------------------------------------
bpUserSettings() {

  PROJDIR="${HOME}/Projects"
  ghUser="zonbrisad"
  ghURL="github.com"
  PMG_TEMP=~/pmg/tmp

  projects=(
    "bashplates" "bp bp_install"
    "Debugsock" ":"
    "pyplate" "ppl install"
    "makeplates" "mp install"
    "LEF" ":"
    "mTerm" ":"
    "Tester" ":"
    "luaconf" ":"
    "gittest" ":"
    "OmTerm" ":"
    "mpterm" ":"
    "def" "def install"
  )

  #
  # Package list fields:
  #
  # Fields
  # =================================================
  # Package type: [apt|npm|pip|snap|ppa|git]
  # Name:         Package type
  # Param:        Extra parameter
  #
  # Examples:
  #
  serverPkgs=(
    "apt" "rdiff-backup" ":"
    "apt" "nfs-common" ":"
    "apt" "ssmtp" ":"
    "apt" "mailutils" ":"
  )

  sambaPkgs=(
    "apt" "samba-common" ":"
    "apt" "samba" ":"
    "apt" "smbclient" ":"
  )

  kvmPkgs=(
    "apt" "qemu-kvm" ":"
    "apt" "virt-manager" ":"
    "apt" "virt-top" ":"
    "apt" "libvirt-daemon-system" ":"
    "apt" "libvirt-clients" ":"
    "apt" "bridge-utils" ":"
  )

  utilsPkgs=(
    "apt" "jed" ":"
    "apt" "jed-extra" ":"
    "apt" "htop" ":"
    "apt" "nmap" ":"
    "apt" "lm-sensors" ":"
    "apt" "apt-file" ":"
    "apt" "net-tools" ":"
    "apt" "bridge-utils" ":"
    "apt" "smartmontools" ":"
    "apt" "testdisk" ":"
    "apt" "gddrescue" ":"
    "apt" "tmux" ":"
    "apt" "npm" ":"
    "apt" "snapd" "snap_unrestrict"
    "apt" "acpi" ":"
    "apt" "bat" ":"
    "apt" "ncdu" ":"
    "git" "https://github.com/ogham/exa" ":"
    "git" "powertop" ":"
    "apt" "shellcheck" ":"
    "apt" "tree" ":"
  )

  testing=(
    "apt" "stress-ng" ":"
  )

  snap_unrestrict() {
    #sudo bpRm /etc/apt/preferences.d/nosnap.pref
    sudo rm -f /etc/apt/preferences.d/nosnap.pref
  }

  desktopUtilPkgs=(
    "apt" "brasero" ":"
    "apt" "gnome-tweaks" ":"
    "apt" "gnome-shell-extension-impatience" ":"
    "apt" "gnome-shell-extension-manager" ":"
    "apt" "gnome-screenshot" ":"
    "apt" "vlc" ":"
    "apt" "mesa-utils" ":"
    "apt" "dconf-editor" ":"
    "apt" "usb-creator-gtk" ":"
    "apt" "ubuntu-restricted-extras" ":"
    "apt" "guvcview" ":"
    "ppa" "inkscape" "ppa:inkscape.dev/stable"
    "ppa" "krita" "ppa:kritalime/ppa"
    "snap" "g-assist" ":"
  )

  devUtils=(
    "apt" "bison" ":"
    "apt" "flex" ":"
    "apt" "texinfo" ":"
    "apt" "git" ":"
    "apt" "gitk" ":"
    "apt" "subversion" ":"
    "apt" "meld" ":"
    "apt" "doxygen" ":"
    "npm" "doctoc" ":"
  )

  devC=(
    "apt" "build-essential" ":"
    "apt" "gdb" ":"
    "apt" "gdbserver" ":"
    "apt" "autoconf" ":"
    "apt" "cmake" ":"
    "apt" "ccache" ":"
    "apt" "gettext" ":"
    "apt" "libtool" ":"
    "apt" "splint" ":"
    "apt" "pkg-config" ":"
    "apt" "gperf" ":"
    "apt" "astyle" ":"
    "lst" "devUtils" ":"
  )

  devCLibs=(
    "apt" "libexpat1-dev" ":"
    "apt" "libncurses5" ":"
    "apt" "libncurses5-dev" ":"
    "apt" "lua5.1" ":"
    "apt" "liblua5.1-0" ":"
    "apt" "liblua5.1-0-dev" ":"
    "apt" "libglib2.0-0" ":"
    "apt" "libglib2.0-dev" ":"
    "apt" "libsqlite3-dev" ":"
    "apt" "libc6-dev-amd64" ":"
    "apt" "libelf-dev" ":"
    "apt" "freeglut3-dev" ":"
  )

  devGTK=(
    "apt" "libglib2.0-0" ":"
    "apt" "libglib2.0-dev" ":"
    "apt" "libgtk-3-dev" ":"
    "apt" "glade" ":"
  )

  devQt5=(
    #    "apt" "libglib2.0-0" ":"
    #    "apt" "libglib2.0-dev" ":"
    "apt" "qt5-default" ":"
    "apt" "qt5-qmake" ":"
    "apt" "libqt5core5a" ":"
    "apt" "libqt5serialport5" ":"
    "apt" "libqt5serialport5-dev" ":"
    "apt" "qttools5-dev-tools" ":"
  )

  devARM=(
    "lst" "devC" ":"
    "apt" "binutils-arm-none-eabi" ":"
    "apt" "gcc-arm-none-eabi" ":"
    "apt" "gdb-arm-none-eabi" ":"
    "apt" "libnewlib-arm-none-eabi" ":"
    "apt" "openocd" ":"
		"apt" "qemu-system-arm" ":" 
  )

  devAVR=(
    "lst" "devC" ":"
    "apt" "avrdude" ":"
    "apt" "avr-libc" ":"
    "apt" "gcc-avr" ":"
    "apt" "gdb-avr" ":"
		"apt" "qemu-system-avr" ":" 
  )

  devPython=(
    "apt" "python3" ":"
    "apt" "python3-serial" ":"
    "apt" "python3-pip" ":"
    "apt" "python3-pyqt5" ":"
    "apt" "python3-pyqt5.qtserialport" ":"
    "apt" "python3-pyqt5.qtopengl" ":"
    "apt" "python3-guiqwt" ":"
    "apt" "python3-guidata" ":"
    "apt" "python3-numpy" ":"
    "apt" "python3-scipy" ":"
    "apt" "pyqt5-dev-tools" ":"
    "apt" "pyqt5-examples" ":"
    "apt" "bpython" ":"
    "pip" "GitPython" ":"
    "pip" "black" ":"
    "pip" "rich" ":"
    "pip" "textual" ":"
  )

  devRust=(
    "apt" "rustc" ":"
  )

  science=(
    "apt" "scilab" ":"
  )

}

#---------------------------------------------------------------------
# User defined functions
#---------------------------------------------------------------------

#
# $1 packagename
#
aptIsInstalled() { ##I Check if apt package is installed
  if dpkg -s "$1" &>/dev/null; then
    return 0
  else
    return 1
  fi
}

#
# $1 package name
#
npmIsInstalled() { ##I Check if npm package is installed
  if npm list --depth 1 --global "$1" >/dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}

#
# $1 package name
#
pipIsInstalled() { ##I
  if pip list | grep GitPython &>/dev/null; then
    return 0
  else
    return 1
  fi
}

#
# $1 apt package name
#
installApt() { ##I Install a apt package
  if aptIsInstalled "$1"; then
    bpInfo "APT package $1 is already installed"
    return
  fi

  # Run special script if available
  if [ -n "$2" ]; then
    "$2"
  fi

  if sudo apt -y install "$1"; then
    bpOk "Installed: ${E_BR_GREEN}${1}${E_RESET}"
  else
    bpError "Failed installing ${E_BR_GREEN}${1}${E_RESET}"
  fi
}

ppaIsInstalled() { ##I Check if a PPA is added to source list
  #  if  grep -q "^deb .*${1}" /etc/apt/sources.list /etc/apt/sources.list.d/*; then

  if grep -q "$1" /etc/apt/sources.list.d/*; then
    return 0
  else
    return 1
  fi
}

installPPA() { ##I Install package from ppa

  bpError "PPA install not available"

  if ! ppaIsInstalled "$1"; then
    sudo add-apt-repository --yes "$2"
    sudo apt update
  fi

  installApt "$1"
}

#
# $1 npm package name
#
installNpm() { ##I Install npm package
  if npmIsInstalled "$1"; then
    bpInfo "NPM package $1 is already installed"
    return
  fi

  if sudo npm install --global "$1"; then
    bpOk "Installed: ${E_BR_GREEN}${1}${E_RESET}"
  else
    bpError "Failed installing ${E_BR_GREEN}${1}${E_RESET}"
  fi
}

#
# $1 pip package name
#
installPip() { ##I Install pip package
  if pipIsInstalled "$1"; then
    bpInfo "PIP package $1 is already installed"
    return
  fi

  if pip install "$1"; then
    bpOk "Installed: ${E_BR_GREEN}${1}${E_RESET}"
  else
    bpError "Failed installing ${E_BR_GREEN}${1}${E_RESET}"
  fi
}

installSnap() { ##I Install snap package

  # Run special script if available
  if [ -n "$2" ]; then
    "$2"
  fi

  sudo snap install "$1"

  #bpError "Snap install function is not developed yet"
}

installGit() { ##I Install git package
  bpError "Git install function is not developed yes"
  return
  git -C "${PMG_TEMP}" clone "$1"
  d=~/pmg/tmp/$(basename "$1")
  bpCd "$d"
  # do stuff
  ls
  bpCd "-"
}

#
# $1 package system
# $2 package name
#
installGeneric() {
  if [ "$1" == "apt" ]; then
    installApt "$2" "$3"
  fi

  if [ "$1" == "npm" ]; then
    installNpm "$2" "$3"
  fi

  if [ "$1" == "pip" ]; then
    installPip "$2" "$3"
  fi

  if [ "$1" == "snap" ]; then
    installSnap "$2" "$3"
  fi

  if [ "$1" == "git" ]; then
    installGit "$2" "$3"
  fi

  if [ "$1" == "ppa" ]; then
    installPPA "$2" "$3"
  fi

  if [ "$1" == "lst" ]; then
    local NAME="$2[@]"
    local LIST=("${!NAME}")
    installPkgs "${LIST[@]}"
  fi
}

#
# arg 1  array of packages
#
installPkgs() { ##I Install array of packages
  local arr=("${@}")
  local i=0
  while [ "$i" -lt "${#arr[@]}" ]; do
    pkgt=${arr[$i]}
    ((i++))
    pkg=${arr[$i]}
    ((i++))
    x=${arr[$i]}
    ((i++))
    installGeneric "${pkgt}" "${pkg}" "${x}"
  done
}

##- New

newterminal() { ##D Install new terminal computer
  terminalutils
}

newdesktop() { ##D Install new desktop computer
  terminalutils
  desktoputils
}

newserver() { ##D Install new server
  terminalutils
  serverutils
}

newDev() { ##D Installs c and python development tools
  devutils
  cdevelop
  python
}

##- Utils

terminalutils() { ##D Install terminal utility programs
  installPkgs "${utilsPkgs[@]}"
}

desktoputils() { ##D Install desktop utility programs
  installPkgs "${desktopUtilPkgs[@]}"
}

perf() { ##D System and performance testprograms
  installPkgs "${testing[@]}"
}

##- Server systems

serverutils() { ##D Install server packages
  installPkgs "${serverPkgs[@]}"
}

kvm() { ##D Install KVM virtual machine manager
  installPkgs "${kvmPkgs[@]}"
}

sshserver() { ##D Install and activate ssh server
  bpInstall "openssh-server"
  sudo systemctl enable ssh
  sudo systemctl start ssh
}

samba() { ##D Install samba server and tools
  installPkgs "${sambaPkgs[@]}"
}

##- Development tools

devutils() { ##D Install development utls like git, svn, flex, doxygen
  installPkgs "${devUtils[@]}"
}

cdev() { ##D Install packages for native C/C++ development
  gtk3=1
  qt5=1
  if bpReadBoolDN "Do you want to install GTK3 dev tools?"; then
    gtk3=0
  fi
  if bpReadBoolDN "Do you want to install QT5 dev tools?"; then
    qt5=0
  fi

  installPkgs "${devC[@]}"
  installPkgs "${devCLibs[@]}"

  if [ "$gtk3" -eq 0 ]; then
    installPkgs "${devGTK[@]}"
  fi

  if [ "$qt5" -eq 0 ]; then
    installPkgs "${devQt5[@]}"
  fi

}

armdev() { ##D Install ARM C development packages
  installPkgs "${devARM[@]}"
}

avrdev() { ##D Install AVR C development packages
  installPkgs "${devAVR[@]}"
}

java() { ##D Install Java development packages
  sudo apt-get -y install python-software-properties
  sudo add-apt-repository ppa:webupd8team/java
  sudo apt-get -y update
  sudo apt-get -y install oracle-java8-installer
}

python() { ##D Install python development packages
  installPkgs "${devPython[@]}"
}

sci() { ##D Install science and technology packages
  installPkgs "${science[@]}"
}

WORK=~/Downloads

gitClonePull() {
  if [ ! -d "$2" ]; then
    git clone "$1"
  else
    cd "$2" || bpExit
    git pull
  fi
}

shellcheck() { ##D download compile and install latest version shellcheck

  dpkg-query -l cabal-install >/dev/null

  if [ "$?" -eq 1 ]; then
    sudo apt-get -y install cabal-install
  fi

  cabal update

  bpCd "$WORK"

  if [ ! -d "$WORK"/shellcheck ]; then
    git clone https://github.com/koalaman/shellcheck.git
  else
    bpCd "$WORK"/shellcheck
    git pull
  fi

  bpCd "$WORK"/shellcheck

  cabal install

  # check if path is setup right
  which shellcheck

  if [ "$?" -eq 1 ]; then
    echo
    echo "Add the following to global PATH."
    echo 'export PATH="$HOME/.cabal/bin:$PATH"'
  fi
}

AVRSIMDIR=~/Downloads/simavr

avrsim() { ##D Download compile and install avrsim
  #git clone https://github.com/buserror/simavr  ${AVRSIMDIR}
  bpCd "${AVRSIMDIR}"
  ls
  make
  bpCd "-"
}

#- Development libraries

libqt() { ## Install Qt development libraries
  installPkgs "${libqtPkgs[@]}"
}

libgtk() { ## Install GTK+ development libraries
  installPkgs "${libgtkPkgs[@]}"
}

##- Science and technology

sci() { ##D Install science and technology packages
  installPkgs "${sciPkgs[@]}"
}

##- Single programs

starship() { ##D Starship prompt manager
  curl -sS https://starship.rs/install.sh | sh
}

##- Projects

#
# Clone git repo
#
# $1 URL
# $2 Destination dir
#
gclone() {
  fn=$(basename -- "$1")
  fn="${fn%.*}"
  bpCd "${2}"
  if [ -e "$fn" ]; then
    bpInfo "Directory $(bpColorizeFile "$(realpath "$fn")") already exists, skipping cloning"
    bpCd -
    return
  fi

  if git clone "$1"; then
    bpOk "Cloning of $(bpColorizeUrl "$1") successfull."
  else
    bpError "Cloning of $(bpColorizeUrl "$1") failed."
  fi
}

ghClone() { ## Github clone
  #  gclone "ssh://git@${ghURL}:/${ghUser}/${1}.git" "${PROJDIR}"
  gclone "${1}" "${PROJDIR}"
}

projects() { ##D Checkout all git projects
  bpPrintLine "Cloning github projects"
  bpMkDir "${PROJDIR}"
  len=${#projects[@]}
  i=0
  while [ "$i" -lt "$len" ]; do
    proj="${projects[$i]}"
    ((i++))
    cmd="${projects[$i]}"
    ((i++))
    ghClone "${proj}"

    if [ "$cmd" != ":" ]; then
      ${PROJDIR}/${proj}/${cmd}
    fi

  done
}

rmprojects() { ##D Remove all projects
  :
}

#---------------------------------------------------------------------
# Bashplate settings
#---------------------------------------------------------------------
bpInitSettings() {

  ##V Script version info
  BP_VERSION="1.04"

  ##V Usage info
  BP_USAGE="Usage: ${BP_SELF} command [option]"

  ##V Description text
  BP_DESC="Peter Malmberg's install script"

  ##V logfile (uncomment to use logfile)
  BP_LOGFILE=${BP_SELF_DIR}/${BP_SELF}.log

  ##V Lock file (uncomment to use lock file feature )
  #BP_LOCK_FILE=/tmp/${BP_SELF}.lock

  ##V Logging options (uncomment to activate logging parameters)
  BP_LOG_OK=1
  BP_LOG_INFO=1
  BP_LOG_WARNING=1
  BP_LOG_ERROR=1
  BP_LOG_CRITICAL=1

  ##V Activate settings function (will create settings file when run)
  #BP_CONF=1

}
#---------------------------------------------------------------------
# Bashplate Hooks
#---------------------------------------------------------------------

##V Default command (uncomment to use a default command )
DEFAULT_CMD_HOOK=help

##V Pre script hook, execute this function before every command
#PRE_SCRIPT_HOOK=

##V Post script hook, execute this function after every command
#POST_SCRIPT_HOOK=

##V Function to be executed before every other cmd except DEFAULT function
#PRE_CMD_HOOK=

##V Function to be executed after every other function except DEFAULT function
#POST_CMD_HOOK=

##V Function to be executed after information command
#POST_INFO_HOOK=

##V Function run before help command is executed
#PRE_HELP_HOOK=

##V Function run after help command is executed
#POST_HELP_HOOK=

#---------------------------------------------------------------------
# Signal traps
#---------------------------------------------------------------------

signalInt() {
  bpCleanUp
  exit "$BP_OK"
}

signalHup() {
  bpCleanUp
}

signalQuit() {
  echo "Quit"
  bpCleanUp
}

signalTerm() {
  echo "Term"
  bpCleanUp
}

signalErr() {
  echo
  echo
  bpError "Trace error Row: $2  Function: $1"
  echo
  bpCallStack "$*"
  bpExit 1
}

signalDbg() {
  echo "Debug Row: $2  Function: $1"
}

##C- IHELP Exit and cleanup

bpCallStack() { ##I Print out BASH call stack
  bpPrintLine "Call stack"
  echo
  local frame=0
  while caller $frame | sed -r -e "s/[0-9]*/${BP_C_VALUE}&${E_RESET}/"; do
    ((frame++))
  done
  echo "$*"
  bpPrintLine
}

bpCleanUp() {           ##I Cleanup function
  rm -f "$BP_LOCK_FILE" # remove Lock file
  #  echo -e "${E_SHOW}"     # Turn on cursor if turned of
}

#
# $1 exit code, if not given exit code is 0=SUCCESS
#
bpExit() { ##I Function for safely exiting script
  bpCleanUp

  # execute postscript hook if existing
  if [ -n "$POST_SCRIPT_HOOK" ]; then
    ${POST_SCRIPT_HOOK}
  fi

  # Check if argument is given
  if [ -z "$1" ]; then
    exit 0 # Success
  else
    exit "$1"
  fi
}

bpErrorExit() { ##I Safely exit script with a error
  bpError "${1}"
  bpCleanUp
  exit 1
}

#---------------------------------------------------------------------
# ANSI escape codes
#---------------------------------------------------------------------

# ANSI foreground colors codes
#
E_BLACK=$'\e[38:5:0m'       # Black
E_RED=$'\e[38:5:1m'         # Red
E_GREEN=$'\e[38:5:2m'       # Green
E_YELLOW=$'\e[38:5:3m'      # Yellow
E_BLUE=$'\e[38:5:4m'        # Blue
E_MAGENTA=$'\e[38:5:5m'     # Magenta
E_CYAN=$'\e[38:5:6m'        # Cyan
E_GRAY=$'\e[38:5:7m'        # Gray
E_DARKGRAY=$'\e[38:5:8m'    # Dark Gray
E_BR_RED=$'\e[38:5:9m'      # Bright Red
E_BR_GREEN=$'\e[38:5:10m'   # Bright Green
E_BR_YELLOW=$'\e[38:5:11m'  # Bright Yellow
E_BR_BLUE=$'\e[38:5:12m'    # Bright Blue
E_BR_MAGENTA=$'\e[38:5:13m' # Bright Magenta
E_BR_CYAN=$'\e[38:5:14m'    # Bright Cyan
E_WHITE=$'\e[38:5:15m'      # White

# ANSI background color codes
#
E_BG_BLACK=$'\e[48;5;0m'       # Black
E_BG_RED=$'\e[48;5;1m'         # Red
E_BG_GREEN=$'\e[48;5;2m'       # Green
E_BG_YELLOW=$'\e[48;5;3m'      # Yellow
E_BG_BLUE=$'\e[48;5;4m'        # Blue
E_BG_MAGENTA=$'\e[48;5;5m'     # Magenta
E_BG_CYAN=$'\e[48;5;6m'        # Cyan
E_BG_GRAY=$'\e[48;5;7m'        # Gray
E_BG_DARK_GRAY=$'\e[48;5;8m'   # Dark gray
E_BG_BR_RED=$'\e[48;5;9m'      # Bright Red
E_BG_BR_GREEN=$'\e[48;5;10m'   # Bright Green
E_BG_BR_YELLOW=$'\e[48;5;11m'  # Bright Yellow
E_BG_BR_BLUE=$'\e[48;5;12m'    # Bright Blue
E_BG_BR_MAGENTA=$'\e[48;5;13m' # Bright Magenta
E_BG_BR_CYAN=$'\e[48;5;14m'    # Bright Cyan
E_BG_WHITE=$'\e[48;5;15m'      # White

# ANSI underline color codes
#
# Not in standard. implemented in Kitty, VTE, mintty, etc.
#
E_UL_BLACK=$'\e[58;5;0m'       # Black
E_UL_RED=$'\e[58;5;1m'         # Red
E_UL_GREEN=$'\e[58;5;2m'       # Green
E_UL_YELLOW=$'\e[58;5;3m'      # Yellow
E_UL_BLUE=$'\e[58;5;4m'        # Blue
E_UL_MAGENTA=$'\e[58;5;5m'     # Magenta
E_UL_CYAN=$'\e[58;5;6m'        # Cyan
E_UL_GRAY=$'\e[58;5;7m'        # Gray
E_UL_DARKGRAY=$'\e[58;5;8m'    # Dark Gray
E_UL_BR_RED=$'\e[58;5;9m'      # Bright Red
E_UL_BR_GREEN=$'\e[58;5;10m'   # Bright Green
E_UL_BR_YELLOW=$'\e[58;5;11m'  # Bright Yellow
E_UL_BR_BLUE=$'\e[58;5;12m'    # Bright Blue
E_UL_BR_MAGENTA=$'\e[58;5;13m' # Bright Magenta
E_UL_BR_CYAN=$'\e[58;5;14m'    # Bright Cyan
E_UL_WHITE=$'\e[58;5;15m'      # White

# ANSI Text attributes
E_BOLD=$'\e[1m'               # Bold text
E_LOWI=$'\e[2m'               # Low intensity
E_ITALIC=$'\e[3m'             # Italic text
E_UNDERLINE=$'\e[4m'          # Underlined text
E_UNDERLINE_DOUBLE=$'\e[4:2m' # Double underline (limited support)
E_UNDERLINE_CURLY=$'\e[4:3m'  # Curly underline (limited support)
E_UNDERLINE_DOT=$'\e[4:4m'    # Dotted underline (limited support)
E_UNDERLINE_DASH=$'\e[4:5m'   # Dashed underline (limited support)
E_BLINK=$'\e[5m'              # Blinking text
E_RAPID_BLINK=$'\e[6m'        # Rapid blink (Limited support)
E_REVERSE=$'\e[7m'            # Reverse color
E_CROSSED=$'\e[9m'            # Crossed over text
E_FRAKTUR=$'\e[20m'           # Gothic (limited support)
E_FRAMED=$'\e[51m'            # Framed (limited support)
E_OVERLINED=$'\e[53m'         # Overlined text
E_SUPERSCRIPT=$'\e[73m'       # Superscript text (limited support)
E_SUBSCRIPT=$'\e[74m'         # Subscript text (limited support)

# ANSI cursor operations
#
E_RETURN=$'\e[F'  # Move cursor to begining of line
E_UP=$'\e[A'      # Move cursor one line up
E_DOWN=$'\e[B'    # Move cursor one line down
E_FORWARD=$'\e[C' # Move cursor forward
E_BACK=$'\e[D'    # Move cursor backward
E_HIDE=$'\e[?25l' # Hide cursor
E_SHOW=$'\e[?25h' # Show cursor

E_RESET=$'\e[0m' # Clear Attributes

# Default Bashplate colortheme
BP_C_OK="${E_BR_GREEN}"
BP_C_INFO="${E_BR_CYAN}"
BP_C_DEBUG="${E_BG_GREEN}${E_WHITE}"
BP_C_WARNING="${E_BR_YELLOW}"
BP_C_ERROR="${E_BR_RED}"
BP_C_CRITICAL="${E_BG_RED}${E_WHITE}"
BP_C_LINE="${E_DARKGRAY}"
BP_C_LINE_TEXT="${E_YELLOW}"

BP_C_DESCRIPTION="${E_BR_MAGENTA}"
BP_C_ID="${E_CYAN}"
#BP_C_DESCRIPTION="${E_CYAN}"
#BP_C_ID="${E_BR_MAGENTA}"

BP_C_FILENAME="${E_BR_CYAN}"
BP_C_PATH="${E_CYAN}"
BP_C_URL_SCHEME="${E_DARKGRAY}"
# BP_C_URL_USER=""
# BP_C_URL_HOST=""

# Shellscript colorize colors
BP_C_RESERVED="${E_RED}"
BP_C_COMMENT="${E_CYAN}"
BP_C_STRING="${E_GREEN}"
BP_C_VAR="${E_BR_YELLOW}"

# Exit codes
#
BP_OK=0 # successful termination

#---------------------------------------------------------------------
# Bashplate internal functions
#---------------------------------------------------------------------

##C- IHELP Printing functions

#
# $1 text to be printed
# $2 text color
# $3 line color
# $4 middle character
# $5 line character
#
bpPrintLineGeneric() { ##I Print text with adjusted line after with selectable colors
  len1="${#1}"
  len4="${#4}"

  echo -en "${2}${1}${4}${3}"
  l=$((BP_COLUMNS - len1 - len4))
  seq -s"${5}" "${l}" | tr -d '[:digit:]'
  echo -en "${E_RESET}"
}

#
# $1 text to be printed
# $2 text color
# $3 line color
#
bpTextLineC() { ##I Print text with adjusted line after with selectable colors
  bpPrintLineGeneric "$1" "$2" "$3" " " "-"
}

bpPrintLine_old() { ##I Print text with line after
  bpTextLineC "$1" "${BP_C_LINE_TEXT}" "${BP_C_LINE}"
}

bpPrintLine() { ##I Print text with line after
  #  echo "$1 ${#1}"
  if [ "${#1}" -eq 0 ]; then
    bpPrintLineGeneric "" "" "${BP_C_LINE}" "" "-"
  else
    bpPrintLineGeneric "$1" "${BP_C_LINE_TEXT}" "${BP_C_LINE}" " " "-"
  fi
}

bpPrintLine_deprecated() { ##I Print a divider row
  bpPrintLineGeneric "" "${BP_C_LINE}" "${BP_C_LINE}" "" "-"
}

#
# $1 command color
# $2 description color
# $3 command text
# $4 desccription text
#
bpPrintInfoGeneric() { # Generic command/description printout function
  printf "${1}  %-24.24s${E_RESET} ${2}%s${E_RESET}\n" "$3" "$4"
}

#
# $1 text for column 1
# $2 text for column 2
#
bpPrintInfo() { ##I Print text into two columns
  bpPrintInfoGeneric "${BP_C_ID}" "${BP_C_DESCRIPTION}" "$1" "$2"
}

bpPrintInfoAlt() {
  bpPrintInfoGeneric "${E_DARKGRAY}" "${BP_C_DESCRIPTION}" "$1" "$2"
}

#
# $1 text for column 1
# $2 variable for column 2
# $3 optional text form column 2
#
bpPrintVar() { ##I Print variable value and description
  var="$2"
  if [ "${!var}" ]; then
    if [ -n "$3" ]; then
      X=${3}
    else
      X="${!var}"
    fi
    bpPrintInfo "$1" "${X}"
  else
    printf "${BP_C_ID}  %-24s${E_RESET} ${E_RED}N/A${E_RESET}\n" "$1"
  fi
}

#
# Colorize string containing filename
#
# $1 string with filename to colorize
# ret colorized string
#
bpColorizeFile() { ##I Colorize string containing filename
  echo "${BP_C_PATH}$(dirname "$1")/${BP_C_FILENAME}$(basename "$1")${E_RESET}"
}

#
# $1 string with url to colorize
# ret colorized string
#
# todo: give username and port own color
#
bpColorizeUrl() { ##I Colorize string containing URL
  URL=$(sed -r -e "s/^.*\/\///" <<<"$1")
  SCHEME=$(sed -r -e "s/:\/.*//" <<<"$1")
  # USERNAME=$(sed -r -e "s/@.*//" <<<"$URL")
  # PORT=$(sed -r -e "s/^:[0-9]*/XXX/" <<<"$URL")
  # echo -e "Username: $USERNAME"
  # echo -e "Port: $PORT"

  #URL=$(echo -n "$1" | sed -r -e "s/^.*\/\///")
  #SCHEME=$(echo -n "$1" | sed -r -e "s/:\/.*//")

  echo -e -n "${BP_C_URL_SCHEME}${SCHEME}${E_RESET}://$(bpColorizeFile "${URL}")"
}

#
# $1 string to be filtered
#
bpFilterEscape() { ##I Filter escape characters from string
  echo "$1" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"
}

##C- IHELP File operations

#
# $1 command to execute
#
bpRun() { ##I Execute command
  if bpHasCmd "${1}"; then
    "$@"
    return $?
  else
    bpError "Could not execute $1, command does not exist!"
    return 1
  fi
}

#
# $1 directory to change to
#
bpCd() { ##I Safe cd function (exits on fail)
  cd "$1" || bpExit "Failed to cd to [$1]"
}

#
# $1 Directory to be created
#
bpMkDir() { ##I Create a directory if it does not exist
  if [ ! -d "$1" ]; then
    if mkdir --parents "$1"; then
      bpOk "Creating directory $(bpColorizeFile "${1}")."
      return 0
    else
      bpError "Failed to create directory $(bpColorizeFile "${1}")."
      return 1
    fi
  fi
}

#
# $1 target file
# $2 link
#
bpLn() { ##I Create symbolic link
  if [ ! -L "$1" ]; then
    if ln -sf "${1}" "${2}"; then
      bpOk "Creating link $(bpColorizeFile "${2}")."
      return 0
    else
      bpError "Failed to create link $(bpColorizeFile "${2}")."
      return 1
    fi
  fi
}

#
# $1 file(s) to be copied
# $2 destination
#
bpCp() { ##I Copy file(s)
  if cp -rf "$@"; then
    bpOk "Copying $(bpColorizeFile "${1}") to $(bpColorizeFile "${2}")"
    return 0
  else
    bpError "Failed copying $(bpColorizeFile "${1}") to $(bpColorizeFile "${2}")"
    return 1
  fi
}

#
# $1 file(s) to be moved
# $2 destination
#
bpMv() { ##I Move file(s)
  if mv "$1" "$2"; then
    bpOk "Moving file $(bpColorizeFile "${1}") to $(bpColorizeFile "${2}")."
    return 0
  else
    bpError "Failed moving file $(bpColorizeFile "${1}") to $(bpColorizeFile "${2}")."
    return 1
  fi
}

#
# $1 file(s) to be removed
#
bpRm() { ##I Remove file(s)
  if rm -rf "${1}"; then
    bpOk "Removing file $(bpColorizeFile "${1}")."
    return 0
  else
    bpError "Failed removing file $(bpColorizeFile "${1}")."
    return 1
  fi
}

#
# $1 file to be backed up
#
bpBackup() { ##I Make backup of file
  BF="${1}_$(date +"%Y%m%d")-$(date +"%H%M%S").bak"

  if cp -rf "$1" "${BF}"; then
    bpOk "Backing up file $(bpColorizeFile "$1") to $(bpColorizeFile "${BF}")."
    return 0
  else
    bpError "Failed backing up file $(bpColorizeFile "$1") to $(bpColorizeFile "${BF}")."
    return 1
  fi
}

#
# $1 file
# $2 text to replace
# $3 new text
#
bpReplace() { ##I Replace text in file
  sed -i -e "s/${2}/${3}/g" "$1"
}

#
# $1 file
# $2 pattern matching line
# $3 new text
#
bpReplaceLine() { ##I Replace entire line matching pattern
  sed -i -e "0,/${2}/s/${2}.*/${3}/" "${1}"
}

#
# $1 file
# $2 line to append
#
bpAppendIfNoSuchLine() { ##I Append a line if it does not exist in file
  grep -q -F "$2" "$1" || echo "$2" >>"$1"
}

#
# $1 file
# $2 string
#
bpRemoveLineContaining() { ##I Remove line in file if it contains given string
  grep -v "$2" "$1" >"${1}_tmp"
  mv -f "${1}_tmp" "${1}"
}

#
# $1 file
# $2 string
# return true if existing
#
bpStrExist() { ##I Check if string exist in file
  if [ ! -f "$1" ]; then
    return 1
  fi

  if grep -q -F "$2" "$1"; then
    return 0
  else
    return 1
  fi
}

#
# $1 file to open in editor
# $2 override editor (optional)
#
bpEdit() { ##I Open file in editor set by BP_EDIT variable

  if [ -n "$2" ]; then
    bpRun "$2" "$1"
    return 0
  fi

  if [ -n "$BP_EDITOR" ]; then
    bpRun "${BP_EDITOR}" "${1}"
  else
    bpError "BP_EDITOR variable not set, can't open file ${1}"
  fi
}

#
# $1 file
# $2 start marker
# $3 end marker
#
bpGetSection() { ##I Get text from file between two markers
  grep -A 10000 -m 1 "$2" <"$1" | grep -B 10000 -m 1 "$3" | grep -v "$2" | grep -v "$3"
}

#
# $1 File to import
#
bpImport() { ## Import file into variable
  if [ -f "$1" ]; then
    cat "$1"
  fi
}

#
# $1 file
# $2 match
# $3 text to insert
#
bpInsert() { ##I Insert text into file
  a=$(grep -A 10000 "$2" <"$1" | grep -v "$2")
  b=$(grep -B 10000 "$2" <"$1" | grep -v "$2")

  echo "$b" "$3" "$a" >|"$1"
}

##C- IHELP Input

#
# $1  Question string
# $2  Default value
# return string read from cmdline/default if enter pressed
#
bpReadStr() { ##I Read string from commandline

  if [ "${2}" == "" ]; then
    read -erp "${1} > " result
  else
    read -erp "${1} [$2] > " result
    if [ "${result}" == "" ]; then
      result="${2}"
    fi
  fi

  echo "${result}"
}

#
# $1  Question string
# $2  Default value
# $3  min value
# $4  max value
# return integer read from cmdline/default if enter pressed
#
bpReadInt() { ##I Read integer from commandline
  while true; do
    if [ "${2}" == "" ]; then
      read -erp "${1} ($3-$4) >" result
      if [ "${result}" == "" ]; then
        result=$(($3 - 1))
      fi
    else
      read -erp "${1} ($3-$4) [$2] >" result
      if [ "${result}" == "" ]; then
        result="${2}"
      fi
    fi
    if [ $((result)) -ge "$3" ] && [ $((result)) -le "$4" ]; then
      break
    fi
  done
  echo "${result}"
}

#
# $1 question text
# $2 default answer 0 = yes, 1 = no
# return 0 = Yes, 1=No
#
bpReadBool() { ##I Ask yes/no question generic
  while true; do

    if [ "$2" -eq 1 ]; then
      yn=$(bpReadStr "${1} [y/N]")
    else
      yn=$(bpReadStr "${1} [Y/n]")
    fi

    case "$yn" in
    [Yy]*)
      return 0
      break
      ;;
    [Nn]*)
      return 1
      break
      ;;
    "")
      return "$2"
      break
      ;;
    *) echo "Please answer yes or no." ;;
    esac
  done
}

#
# $1 Question text
# return 0 = Yes, 1=No
#
bpReadBoolDY() { ##I Ask yes/no question default yes
  bpReadBool "$1" 0
  return $?
}

#
# $1 Question text
# return 0 = Yes, 1=No
#
bpReadBoolDN() { ##I Ask yes/no question default no
  bpReadBool "$1" 1
  return $?
}

#---------------------------------------------------------------------
#
#---------------------------------------------------------------------

# Settings file ------------------------------------------------------

##C- BP_CONF Bashplate settings

#
# $1 config file
# $2 setting name
# $3 setting value
# $4 setting description
#
bpAddSetting() {

  if ! bpStrExist "${1}" "${2}"; then
    {
      echo "# ${4}"
      echo "${2}=\"${3}\""
      echo
    } >>"${1}"
  fi
}

bpAddSettings() {
  bpAddSetting "$BP_SETTINGS" "BP_NAME" "John Doe" "Name of user"
  bpAddSetting "$BP_SETTINGS" "BP_EMAIL" "JohnDoe@foo.bar" "Email of user"
  bpAddSetting "$BP_SETTINGS" "BP_EDITOR" "vi" "Default editor"
  bpAddSetting "$BP_SETTINGS" "BP_LICENSE" "MIT" "Default project license"
  bpAddSetting "$BP_SETTINGS" "BP_ORG" "ACME" "Default organisation"
  bpAddSetting "$BP_SETTINGS" "BP_DIFF" "meld" "Default diff program"
  bpAddSetting "$BP_SETTINGS" "BP_PATH" "${BP_SELF_DIR}" "Path to Bashplates directory"
}

# Change setting in config file (key value pair)
#
# $1 config file
# $2 setting to change
# $3 new value for setting
#
bpChSetting() {
  SETTING="$2"
  VAL="$3"

  S=$(bpStrExist "${1}" "${2}")
  if [ "${S}" == "0" ]; then
    bpAddSettings
  fi
  if sed -i "s/^\(${SETTING}\s*=\s*\).*\$/\1$VAL/" "$1"; then
    bpOk "Setting ${SETTING} to ${VAL}"
  else
    bpError "Failed setting ${SETTING} to ${VAL}"
  fi
}

bpCreateSettings() {
  bpInfo "Creating new bashplates settings. $(bpColorizeFile "${BP_SETTINGS}")"
  bpMkDir "${BP_SETTINGS_DIR}"
  bpMkDir "${BP_SETTINGS_PATHS}"
  bpMkDir "${BP_SETTINGS_MODULES}"

  # if file does not exist add header
  if [ ! -e "${BP_SETTINGS}" ]; then
    echo "# " >>"${BP_SETTINGS}"
    echo "# Bashplates common settings" >"${BP_SETTINGS}"
    echo "# " >>"${BP_SETTINGS}"
    echo >>"${BP_SETTINGS}"
  fi
  bpAddSettings
}

bpLoadSettings() {
  if [ -n "${BP_SETTINGS}" ]; then
    if [ -e "${BP_SETTINGS}" ]; then
      source "${BP_SETTINGS}"
    else
      bpCreateSettings
      source "${BP_SETTINGS}"
    fi
  fi
}

settings() { ##C BP_CONF Print bashplate settings
  bpPrintLine "Bashplates settings"
  bpPrintVar "Name:" BP_NAME
  bpPrintVar "Email:" BP_EMAIL
  bpPrintVar "Default license:" BP_LICENSE
  bpPrintVar "Default editor" BP_EDITOR
  bpPrintVar "Default organisation" BP_ORG
  bpPrintVar "Default diff program" BP_DIFF
  bpPrintLine
}

setname() { ##C BP_CONF Set name
  bpChSetting "${BP_SETTINGS}" "BP_NAME" "\"${2}\""
}

setemail() { ##C BP_CONF Set email address
  bpChSetting "${BP_SETTINGS}" "BP_EMAIL" "\"${2}\""
}

seteditor() { ##C BP_CONF Set default editor
  bpChSetting "${BP_SETTINGS}" "BP_EDITOR" "\"${2}\""
}

setlic() { ##C BP_CONF Set default license
  bpChSetting "${BP_SETTINGS}" "BP_LICENSE" "\"${2}\""
}

setorg() { ##C BP_CONF Set default organisation
  bpChSetting "${BP_SETTINGS}" "BP_ORG" "\"${2}\""
}

setdiff() { ##C BP_CONF Set default diff program
  bpChSetting "${BP_SETTINGS}" "BP_DIFF" "\"${2}\""
}

##C- IHELP Bashrc path/module handling

bpLsPaths() { ##I List paths
  shopt -s nullglob dotglob
  for p in "${BP_SETTINGS_PATHS}"/*; do
    echo "A: $(readlink "${p}")"
  done
}

#
# $1 directory to add to path
#
bpAddPath() { ##I Add dir to PATH variable
  ll=$(echo "${1}" | sed -e 's/\//_/g')

  bpInfo "Adding PATH \"${2}\""
  if [ ! -L "$1" ]; then
    bpLn "${1}" "${BP_SETTINGS_PATHS}/${ll}"
  fi
}

bpRmPath() { ##I Remove path
  bpRm "${BP_SETTINGS_PATHS}/${1}"
}

bpLsModules() { ##I List modules
  shopt -s nullglob dotglob
  for p in "${BP_SETTINGS_MODULES}"/*; do
    readlink "${p}"
  done
}

bpAddModule() { ##I Add init script to
  m=$(realpath "${1}")
  if [ ! -L "$m" ]; then
    rm -f "${BP_SETTINGS_MODULES}/$(basename "${m}")"
    bpLn "$m" "${BP_SETTINGS_MODULES}/."
  fi
}

bpRmModule() { ##I Remove module
  bpRm "${BP_SETTINGS_MODULES}/${1}"
}

##-

# Logging ---------------------------------------------------------

##C- IHELP Log functions

#
# Function logging to file
#
# $1 String to log to file
#
bpLog() { ##I Log to file command
  # check for BP_LOGFILE variable
  if [ -n "$BP_LOGFILE" ]; then
    ts=$(date +"%Y-%m-%d %H:%M:%S")
    bpFilterEscape "$ts $1" >>"${BP_LOGFILE}"
  fi
}

bpLogOk() { ##I Log Ok message to file
  bpLog "[ Ok ] $1"
}

bpLogInfo() { ##I Log Info message to file
  bpLog "[Info] $1"
}

bpLogWarning() { ##I Log Warning message to file
  bpLog "[Warn] $1"
}

bpLogError() { ##I Log Error message to file
  bpLog "[Erro] $1"
}

bpLogCritical() { ##I Log Critical message to file
  bpLog "[Crit] $1"
}

log() { ##C BP_LOGFILE View logfile
  if [ -n "$BP_LOGFILE" ]; then
    if [ -f "${BP_LOGFILE}" ]; then # Check that logfile exists
      D=$(sed -r -e "s|\[Info\]|\[\\${BP_C_INFO}Info\\${E_RESET}\]|" \
        -e "s|\[Warn\]|\[\\${BP_C_WARNING}Warn\\${E_RESET}\]|" \
        -e "s|\[Erro\]|\[\\${BP_C_ERROR}Erro\\${E_RESET}\]|" \
        -e "s|\[ Ok \]|\[\\${BP_C_OK} Ok \\${E_RESET}\]|" \
        -e "s/[-0-9]+/\\${E_MAGENTA}&\\${E_RESET}/1" \
        -e "s/[:0-9]+/\\${E_BR_MAGENTA}&\\${E_RESET}/6" \
        -e "s|\[Crit\]|\[\\${E_BG_RED}\\${E_WHITE}Crit\\${E_RESET}\]|" <"${BP_LOGFILE}")

      echo -e "$D"
    fi
  else
    bpInfo "Logging is not activated"
    bpExit
  fi
}

mlog() { ##C BP_LOGFILE Monitor logfile
  if [ -n "$BP_LOGFILE" ]; then
    if [ -f "${BP_LOGFILE}" ]; then # Check that logfile exists
      tail -f "${BP_LOGFILE}" | sed -r -e "s|\[Info\]|\[\\${BP_C_INFO}Info\\${E_RESET}\]|" \
        -e "s|\[Warn\]|\[\\${BP_C_WARNING}Warn\\${E_RESET}\]|" \
        -e "s|\[Erro\]|\[\\${BP_C_ERROR}Erro\\${E_RESET}\]|" \
        -e "s|\[ Ok \]|\[\\${BP_C_OK} Ok \\${E_RESET}\]|" \
        -e "s/[-0-9]+/\\${E_GREEN}&\\${E_RESET}/1" \
        -e "s/[:0-9]+/\\${E_BR_GREEN}&\\${E_RESET}/6" \
        -e "s|\[Crit\]|\[\\${E_BG_RED}\\${E_WHITE}Crit\\${E_RESET}\]|"

    fi
  else
    bpInfo "Logging is not activated"
    bpExit
  fi
}

##C- IHELP Message

bpOk() { ##I Success message
  if [ -n "$BP_LOG_OK" ]; then
    bpLogOk "$1"
  fi
  echo -e "[${BP_C_OK}Ok${E_RESET}] $1"
}

bpInfo() { ##I Info message
  if [ -n "$BP_LOG_INFO" ]; then
    bpLogInfo "$1"
  fi
  echo -e "[${BP_C_INFO}Info${E_RESET}] $1"
}

bpDbg() { ##I Debug message
  if [ -z "$BP_DEBUG" ]; then
    return
  fi
  if [ -n "$BP_LOG_INFO" ]; then
    bpLogDebug "$1"
  fi

  echo -e "[${BP_C_DEBUG}Dbg${E_RESET}] $1"
}

bpWarning() { ##I Warning message
  if [ -n "$BP_LOG_WARNING" ]; then
    bpLogWarning "$1"
  fi
  echo -e "[${BP_C_WARNING}Warning${E_RESET}] $1"
}

bpError() { ##I Error message
  if [ -n "$BP_LOG_ERROR" ]; then
    bpLogError "$1"
  fi
  echo -e "[${BP_C_ERROR}Error${E_RESET}] $1"
}

bpCritical() { ##I Critical error message
  if [ -n "$BP_LOG_CRITICAL" ]; then
    bpLogCritical "$1"
  fi
  echo -e "[${BP_C_CRITICAL}Critical${E_RESET}] $1"
  bpExit
}

# Various  ---------------------------------------------------------

##C- IHELP Assert

bpAssertRoot() { ##I Assert that user is root
  if [ "$(whoami)" != root ]; then
    bpError "Must be root to use this command."
    bpExit "1"
  fi
}

bpAssertNoLockFile() { ##I Assert that lockfile is not present
  if [ -n "$BP_LOCK_FILE" ]; then
    if [ -f "$BP_LOCK_FILE" ]; then
      bpError "Script is already running. (${BP_LOCK_FILE})"
      exit "1" # do not use bpExit because lock file belongs to prexsisting process
    fi
    touch "$BP_LOCK_FILE"
  fi
}

#
# $1 string list of programs that are required
#
bpAssertProgs() { ##I Assert that required programs are available on the system
  things=("$@")
  e=0
  for thing in "${things[@]}"; do
    hash "$thing" 2>&- ||
      {
        bpError "Required program \"$thing\" not found."
        e=1
      }
  done
  if [ $e -eq 1 ]; then
    bpExit 1
  fi
}

##C- IHELP Debug/Controll

icheck() { ##I Make a shellcheck
  bpAssertProgs "shellcheck"
  shellcheck "$0"
}

irt() { ##I Remove tabs from script
  sed -i -e 's/\t/  /g' "${BP_SELF_DIR}/${BP_SELF}"
}

##C- IHELP Help & info

printCommand() {
  IFS=$' '
  read -r -a arr <<<"$1"
  inf="${arr[*]:3}"
  #IFS=$'\n'
  bpPrintInfo "${arr[0]}" "${inf}"
}

printCondCommand() {
  IFS=$' '
  read -r -a arr <<<"$1"
  help_info="${arr[*]:4}"
  COND=${arr[3]}
  eval "D=\$$COND"

  if [ -n "$D" ]; then
    bpPrintInfo "${arr[0]}" "${help_info}"
  else
    if [ "$2" -eq 1 ]; then
      bpPrintInfoAlt "${arr[0]}" "$help_info"
    fi
  fi
}

printNamedLine() {
  IFS=$' '
  read -r -a arr <<<"$1"
  info=${arr[*]:1}
  bpPrintLine "${info}"
}

printCondNamedLine() {
  IFS=$' '
  read -r -a arr <<<"$1"
  name=${arr[*]:2}
  COND=${arr[1]}
  eval "D=\$$COND"
  if [ -n "$D" ]; then
    bpPrintLine "$name"
  fi
}

help() { ##D Print help information
  echo "$BP_USAGE"
  echo -e "$BP_DESC"
  echo

  BP_HELP=1

  if [ ! -e "${BP_SETTINGS_DIR}" ] && [ -n "${BP_SETTINGS}" ]; then
    BPINIT=1
  fi

  # bpExecHook "PRE_HELP_HOOK"
  if [ -n "$PRE_HELP_HOOK" ]; then
    "${PRE_HELP_HOOK}"
  fi

  IFS=$'\n'
  SC="$1"
  HELP_LINES=$(grep -h '##' "$0" | grep -v -e 'grep' -e '##I' -e '##V' -e '\*##C' -e '\*##C-' -e '\"##' -e '##-//' -e 'help_line' -e 'printLine')
  HELP_LINES="${HELP_LINES//()/}"

  for help_line in ${HELP_LINES}; do
    case "$help_line" in
    *"##-"*) printNamedLine "$help_line" ;;
    *"##C-"*) printCondNamedLine "$help_line" ;;
    *"##CV"*) printCondCommand "$help_line" 1 ;;
    *"##C"*) printCondCommand "$help_line" 0 ;;
    *"##D"*) printCommand "$help_line" '##D' ;;
    *) ;;

    esac
  done

  if [ -n "$POST_HELP_HOOK" ]; then
    "${POST_HELP_HOOK}"
  fi
}

#
# $1 command
#
ihelp() { ##I Print internal help information

  # Singe command documentation
  if [ "$2" != "" ]; then
    echo
    bpPrintLine "$2"
    echo
    echo "#"
    echo -n "# "
    grep --no-filename "$0" -e "${2}()" | sed -n -e 's/^.*##I //p'
    grep --no-filename -B 8 "$0" -e "${2}()" | grep "#" | grep -v "##"
    bpPrintLine
    bpExit
  fi

  IFS=$'\n'
  SC="$1"

  IHELP=1      # Force ihelp documentations
  BP_LOGFILE=1 # Force log documentation

  help_lines=$(grep -h '##[C|I|-]' "$0" | grep -v -e 'grep' -e '\*"##[ A-Z]"\*' -e 'help_line' -e 'printNamedLine' -e 'awk' -e 'bpPrintInfo' -e 'name')
  help_lines=$(echo -e "$help_lines" | sed -s 's/()//g')

  for help_line in ${help_lines}; do
    case "$help_line" in
    *"##-"*) printNamedLine "$help_line" ;;
    *"##C-"*) printCondNamedLine "$help_line" ;;
    *"##I"*) printCommand "$help_line" '##I' ;;
    *"##C"*) printCondCommand "$help_line" 0 ;;
    *) ;;

    esac
  done

  bpPrintLine "Bashplates comments"
  bpPrintInfo "##D Description" "Subcommand information comment (shown with help)"
  bpPrintInfo "##C COND Description" "Conditional subcommand comment (shown with help)"
  bpPrintInfo "##- [Text]" "Separator line (shown with help)"
  bpPrintInfo "##C- COND [Text]" "Conditional separator line (shown with help)"
  bpPrintInfo "##I Description" "Internal function comment (shown ihelp)"
  bpPrintLine
}

iinfo() { ##I Show information about script
  bpPrintLine "Script information"
  bpPrintVar "Script" BP_SELF "$(bpColorizeFile "${BP_SELF_DIR}/${BP_SELF}")"
  bpPrintVar "Script version" BP_VERSION
  bpPrintVar "Template version" BP_VERSION
  bpPrintVar "Bashplate settings file" BP_SETTINGS "$(bpColorizeFile "${BP_SETTINGS}")"
  bpPrintVar "Log file" BP_LOGFILE "$(bpColorizeFile "${BP_LOGFILE}")"
  bpPrintVar "Lock file" BP_LOCK_FILE "$(bpColorizeFile "${BP_LOCK_FILE}")"
  bpPrintVar "Default function" DEFAULT_CMD_HOOK
  bpPrintInfo "PID" $$
  bpPrintVar "Date" BP_DATE
  bpPrintVar "Time" BP_TIME
  bpPrintVar "Character columns" BP_COLUMNS
  bpPrintVar "Character lines" BP_LINES

  if [ -n "${POST_INFO_HOOK}" ]; then
    bpPrintLine "App. information"
    ${POST_INFO_HOOK}
  fi
  settings
}

#
# $1 command to check
#
bpHasCmd() { ##I Check if command is available
  if [ -x "$(command -v "${1}")" ]; then
    return 0
  else
    return 1
  fi
}

#
iview() { ##I View example
  # Singe command documentation
  if [ "$2" == "" ]; then
    bpExit
  fi

  if bpHasCmd batcat; then # Use batcat, if available, to view function
    grep --no-filename -A 60 "$0" -e "${2}()" | grep -B 60 -m 1 -x "}" | batcat --language bash
  else
    echo
    bpPrintLine "$2"
    echo
    grep --no-filename -A 60 "$0" -e "${2}()" | grep -B 60 -m 1 -x "}" |
      sed -e "s/#.*/\\${BP_C_COMMENT}&\\${E_RESET}/" \
        -e "s/\<echo\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<if\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<then\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<else\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<fi\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<do\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<done\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<elif\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<case\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<esac\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<for\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<in\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<select\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<time\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<until\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<select\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<eval\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<break\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\<while\>/\\${BP_C_RESERVED}&\\${E_RESET}/" \
        -e "s/\".*\"/\\${BP_C_STRING}&\\${E_RESET}/" \
        -e "s/\([^=]*\)=/${BP_C_VAR}\1\\${E_RESET}=/"
    #             -e $VF
    #             -e 's/\$[{]?[a-zA-Z0-9]*[}]?/XXX/'
    #             -e 's/$?/'"\\${BP_C_VAR}&\\${E_RESET}/" \
    bpPrintLine
  fi
  bpExit
}

ivars() { ##I Print internal variables
  bpPrintLine "Script variables"
  echo
  IFS=$'\n'
  help_lines=$(grep -v -e 'help_lines' -e 'help_line' "$0" | grep -A 1 '##V') # | sed "s/--//" )
  for line in ${help_lines}; do
    if [ "$line" == "--" ]; then
      echo
    else
      help_line=$(echo "${line}" | sed -u -e "s/##V[ ]/${BP_C_DESCRIPTION}/i" -e "s/^.*=/${BP_C_ID}&${E_RESET}/i" -e "s/=/${E_RESET}=/")
      echo -e "$help_line"
      echo -en "$E_RESET"
    fi
  done
  echo
}

ied() { ##I Open this file with default editor
  bpEdit "$0" "$2"
}

version() { ##D Print version information
  echo "$BP_VERSION"
}

# Runs a function in this file as a command
bpRunCommand() {
  if [ "$BP_ARGUMENTS" -eq 0 ]; then

    # check for a default command
    if [ -n "$DEFAULT_CMD_HOOK" ]; then
      "$DEFAULT_CMD_HOOK" "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
      bpExit
    fi
    bpErrorExit "No command given"
  fi

  if [ "$(type -t "$1")" != "function" ]; then # Check if subcommand is declared as function
    bpErrorExit "Command \"$1\" not found"
  fi

  command=$1
  # execute pre command hook  if existing
  if [ -n "$PRE_CMD_HOOK" ]; then
    "${PRE_CMD_HOOK}" "$command"
  fi

  # Check if command is conditional
  CL=$(grep -E "${command}().*##C" "$0")
  if [[ "$CL" = *"##C"* ]]; then

    # Check if condition is true and then execute else printout error message
    read -r -a ARR <<<"$CL"
    CV="${ARR[3]}"
    if [ -n "$CV" ]; then
      eval "D=\$$CV"
      if [ -n "$D" ]; then
        # execute command
        "${command}" "$@"
      else
        bpError "Command \"$command\" not available right now."
      fi
    else
      bpError "Command \"$command\" is conditional, but is missing conditional variable"
    fi
  else
    # command is not conditional, execute
    "${command}" "$@"
  fi

  # execute post command hook  if existing
  if [ -n "$POST_CMD_HOOK" ]; then
    "${POST_CMD_HOOK}" "$command"
  fi
  bpExit
}

#---------------------------------------------------------------------
# Initiate internal variables
#---------------------------------------------------------------------

##V Bashplate version
BP_VERSION="1.20"

##V Directory where script is located
BP_SELF_DIR="${0%/*}"

##V Name of script
BP_SELF=$(basename "$0")

##V Number of arguments given to script
BP_ARGUMENTS=$#

##V Current date
BP_DATE=$(date +"%Y-%m-%d")

##V Current time
BP_TIME=$(date +"%H:%M:%S")

##V Number of columns in terminal
BP_COLUMNS=$(tput cols)

##V Number of lines in terminal
BP_LINES=$(tput lines)

##V Settings directory
BP_SETTINGS_DIR=~/.config/bashplates

##V Settings file
BP_SETTINGS=${BP_SETTINGS_DIR}/bashplates.conf

##V System Path's
BP_SETTINGS_PATHS="${BP_SETTINGS_DIR}/path"

##V Links to modules
BP_SETTINGS_MODULES="${BP_SETTINGS_DIR}/modules"

# Initiate bashplate settings
bpInitSettings

# Initiate user settings
bpUserSettings

#---------------------------------------------------------------------
# Setup signal traps
#---------------------------------------------------------------------

trap signalQuit SIGQUIT
trap signalInt SIGINT
trap signalHup SIGHUP
trap signalTerm SIGTERM
trap 'signalErr ${FUNCNAME} ${LINENO}' ERR

#trap  'signalDbg ${FUNCNAME} ${LINENO}' DEBUG

#---------------------------------------------------------------------
# Load settings and execute script handler
#---------------------------------------------------------------------

# Load configuration file settings
bpLoadSettings

# execute prescript hook if existing
if [ -n "$PRE_SCRIPT_HOOK" ]; then
  ${PRE_SCRIPT_HOOK} "$@"
fi

# Run command parser
bpRunCommand "$@"

# Exit cleanly
bpExit

##C- BP_HELP
